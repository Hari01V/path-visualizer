{"version":3,"sources":["Components/Cell.js","Components/Dropdown.js","Components/Navbar.js","Algorithms/dijkstra.js","Algorithms/bfs.js","Algorithms/dfs.js","Algorithms/astar.js","MazeAlgorithms/weightHexCage.js","Algorithms/greedyBFS.js","Algorithms/bidirectionalBFS.js","MazeAlgorithms/recursiveDivision.js","MazeAlgorithms/concentricMaze.js","MazeAlgorithms/recurDivVertical.js","MazeAlgorithms/recurDivHorizontal.js","database/helper.js","images/amongus.JPG","images/cool.JPG","images/weights.JPG","images/checkpoint.JPG","images/results.JPG","images/WallsWeights.gif","Components/Guide.js","Components/PathFinder.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","onClick","onMouseEnter","onMouseDown","onMouseUp","onMouseLeave","cell","isStart","row","col","isEnd","isWall","isCheckPoint","isVisited","isCheckpoint_visited","weight","class_name","className","Dropdown","title","list","setAlgorithm","setSpeed","setWeight","createMaze","useState","isOpen","setOpen","currentOption","setCurrentOption","useEffect","document","addEventListener","event","target","parentNode","id","stopPropagation","style","background","boxShadow","display","map","item","value","method","name","Navbar","visualize","OPTIONS","resetBoard","clearWalls","clearPath","AddCheckPoint","ischeckPointAdded","algoList","speedList","mazeList","weightList","href","compareDescendingOrder","a","b","cummulativeSum","b_sum","a_sum","dijkstra_algorithm","from_node","wait_time_factor","condition","board","no_of_rows","no_of_cols","time_count","neighbours","nodes_been_to_SPT","Set","shortestPathTree","add","visited_layer_css","setTimeout","querySelector","classList","isGoalReached","count_visited_nodes","choseNode","pop","push","neighbour_nodes","find_neighbours","node","parent","has","sort","length","backtrackPath","to","path","neighbours_size","count","rows","cols","arr","bfs_algorithm","dfs_algorithm","currNode","compare_F_desc","a_f","g","h","b_f","lowerF_in_list","foundNode","find","astar_algorithm","end_node","OPEN_LIST","CLOSED_LIST","Math","abs","filter","element","chooseWeight_Class","currWeight_class","currWeight","greedy_algorithm","bibfs_algorithm","tmpBoard","queue_from_start","queue_from_end","intersection_node","time_count_from_start","time_count_from_end","count_from_start","count_from_end","neighbours_start","visited_from_end","visited_from_start","neighbours_end","max","path_intersection_to_end","queue_end_size","count_end","path_start_to_intersection","queue_start_size","count_start","final_path","k","path_node","randomNumber","from","avoid","floor","random","i","includes","divideChamber","row_range","col_range","row_or_col","BOARD_ROWS","BOARD_COLS","random_line","random_cell","doors","top","left","right","bottom","d","row_range1","row_range2","col_range1","col_range2","setVisualizing","speed","setResult","result","algorithm","visited_nodes","time_taken","path_cost","t0","performance","now","CHECKPOINT","start_node","j","final_time_count","t1","toFixed","till_checkpoint","till_end","path_to_checkpoint","path_to_end","pathCost","isWeighted","checkPointNotAllowed","tmpRow","remove","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","middle_row","middle_col","center","distance","i_from","i_to","min","i_leave","col_leave","col1","col2","ALGO_DESC","guide","heading","subheading","content","imgPath","page1Img","alt","page2Img","undefined","WallsWeights","weights","checkpoint","results","pageSize","Object","keys","Guide","setGuideDialog","guideDialog","page","setPage","rel","para","index","src","disabled","key","isWeightAllowed","PathFinder","initial_start","initial_end","matrix","setMatrix","isMouseDown","setMouseDown","start","setStart","end","setEnd","isStartRelocating","setStartRelocation","isEndRelocating","setEndRelocation","isVisualizing","isCheckPointRelocating","setCheckPointRelocation","setCheckPointAdded","snackOpen","setSnackOpen","snackMsg","setSnackMsg","snackHandleClose","reason","code","initial_board","createBoard","innerHTML","algo","clearWeights","addWeightClass","toggle","need","currAlgo","currAlgorithm","transform","color","row_index","cell_index","handleClick","handleMouseEnter","handleMouseDown","handleMouseUp","handleMouseLeave","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","action","Fragment","IconButton","size","fontSize","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3943a2de.chunk.js","sourcesContent":["import React from 'react';\r\nimport GpsFixedIcon from '@material-ui/icons/GpsFixed';\r\nimport GolfCourseIcon from '@material-ui/icons/GolfCourse';\r\n\r\nimport '../styles/Cell.css';\r\n\r\nexport default function Cell(props) {\r\n\r\n  let { onClick, onMouseEnter, onMouseDown, onMouseUp, onMouseLeave } = props;\r\n  let { row, col, isStart, isEnd, isWall, isVisited, isCheckpoint_visited, isCheckPoint, weight } = props.cell;\r\n\r\n  let class_name = `cell ${isStart ? \"start\" : \"\"} ${isEnd ? \"end\" : \"\"} ${isCheckPoint ? \"checkpoint\" : \"\"} ${!isStart && !isEnd && !isCheckPoint ? (isWall ? \"wall\" : \"\") : \"\"}`;\r\n\r\n  if (!isStart && !isEnd && !isCheckPoint) {\r\n    if (weight === 5) {\r\n      class_name += \" weight-vl \";\r\n    } else if (weight === 10) {\r\n      class_name += \" weight-l \";\r\n    } else if (weight === 20) {\r\n      class_name += \" weight-m \";\r\n    } else if (weight === 30) {\r\n      class_name += \" weight-h \";\r\n    } else if (weight === 50) {\r\n      class_name += \" weight-vh \";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={class_name}\r\n      onClick={onClick}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseDown={onMouseDown}\r\n      onMouseUp={onMouseUp}\r\n      onMouseLeave={onMouseLeave}>\r\n      {isEnd ? <GolfCourseIcon /> : \"\"}\r\n      {isStart ? <GpsFixedIcon /> : \"\"}\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nimport '../styles/Dropdown.css';\r\n\r\nexport default function Dropdown(props) {\r\n\r\n  let { title, list, setAlgorithm, setSpeed, setWeight, createMaze, weight } = props;\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [currentOption, setCurrentOption] = useState(\"\");\r\n\r\n  const handleClick = (event) => {\r\n    if (isOpen) {\r\n      event.stopPropagation();\r\n    }\r\n    setOpen(!isOpen);\r\n  }\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', (event) => {\r\n      if (event.target && event.target.parentNode) {\r\n        if (event.target.parentNode.id !== `dropdown-${title}` && event.target.parentNode.className !== `dropdown-list`\r\n          && event.target.id !== `dropdown-${title}`) {\r\n          setOpen(false);\r\n        }\r\n      }\r\n    })\r\n    if (title === \"Speed\") {\r\n      setCurrentOption(\"fast\");\r\n    }\r\n    if (title === \"Weight\") {\r\n      setCurrentOption(5);\r\n    }\r\n  }, []);\r\n\r\n  const handleSelect = (value, method) => {\r\n    if (title === \"Algorithm\") {\r\n      setAlgorithm(value);\r\n      setCurrentOption(value);\r\n    } else if (title === \"Speed\") {\r\n      setSpeed(value);\r\n      setCurrentOption(value);\r\n    } else if (title === \"Maze\") {\r\n      createMaze(method, weight);\r\n    } else if (title === \"Weight\") {\r\n      setWeight(value);\r\n      setCurrentOption(value);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"dropdown\" id={`dropdown-${title}`}\r\n      onClick={handleClick}\r\n      style={isOpen ? { background: '#002433', boxShadow: '0 0 1vw #002231' } : {}}\r\n      aria-controls=\"simple-menu\" aria-haspopup=\"true\">\r\n      <div className=\"dropdown-title\">{title === \"Speed\" || title === \"Weight\" ? `${title}: ${currentOption}` : title} <ArrowDropDownIcon /></div>\r\n      {title === \"Algorithm\" ?\r\n        <span className=\"selected-option\">{currentOption}</span>\r\n        : \"\"}\r\n      <ul className=\"dropdown-list\" style={isOpen ? { display: 'block' } : { display: 'none' }}>\r\n        {list.map((item) =>\r\n          <li className=\"dropdown-list-item\"\r\n            key={`dropdown-list-item-${item.value}`}\r\n            onClick={() => handleSelect(item.value, item.method)}>{item.name}</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport Dropdown from '../Components/Dropdown';\r\n\r\nimport '../styles/Navbar.css';\r\n\r\nexport default function Navbar(props) {\r\n\r\n  let { visualize, setAlgorithm, setSpeed, setWeight, createMaze, OPTIONS, resetBoard, clearWalls, clearPath, AddCheckPoint, ischeckPointAdded, weight } = props;\r\n\r\n  const algoList = OPTIONS[\"algorithm\"];\r\n  const speedList = OPTIONS[\"speed\"];\r\n  const mazeList = OPTIONS[\"maze\"];\r\n  const weightList = OPTIONS[\"weight\"];\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <a href=\"/\" className=\"navbar-brand\">Path <br></br>Visualizer</a>\r\n      <div className=\"navbar-content\">\r\n        <div className=\"content-1\">\r\n          <Dropdown title={\"Algorithm\"} list={algoList} setAlgorithm={setAlgorithm} />\r\n          <Dropdown title={\"Maze\"} list={mazeList} createMaze={createMaze} weight={weight} />\r\n          <Dropdown title={\"Speed\"} list={speedList} setSpeed={setSpeed} />\r\n        </div>\r\n        <div className=\"content-2\">\r\n          <div className=\"content-2-1\">\r\n            <button className=\"navbar-btn\"\r\n              onClick={resetBoard}>Reset Board</button>\r\n            <button className=\"navbar-btn\"\r\n              onClick={clearWalls}>Clear Walls</button>\r\n            <button className=\"navbar-btn\"\r\n              onClick={clearPath}>Clear Path</button>\r\n          </div>\r\n          <div className=\"content-2-2\">\r\n            <button id=\"checkpoint-btn\" className=\"navbar-btn\"\r\n              onClick={AddCheckPoint}>{ischeckPointAdded ? \"Remove\" : \"Add\"} Checkpoint</button>\r\n            <Dropdown title={\"Weight\"} list={weightList} setWeight={setWeight} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={visualize}\r\n        className=\"visualize-btn\">Visualize</button>\r\n    </div >\r\n  )\r\n}","const visualize_Dijkstra = (board, setVisualizing, speed, setResult) => {\r\n  let result = {\r\n    algorithm: \"Dijkstra's Algorithm\",\r\n    visited_nodes: 0,\r\n    time_taken: 0,\r\n    path_cost: 0\r\n  }\r\n\r\n  const t0 = performance.now();\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n  let CHECKPOINT = null;\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      if (board[i][j].isCheckPoint) {\r\n        CHECKPOINT = { row: i, col: j };\r\n      }\r\n    }\r\n  }\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 200;\r\n  }\r\n\r\n  //DIJKSTRA & PATH\r\n  let final_path = null;\r\n  let final_time_count = 1;\r\n  if (CHECKPOINT === null) {\r\n    const { neighbours, count_visited_nodes, time_count } = dijkstra_algorithm(start_node, wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, 1);\r\n    result.visited_nodes = count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = time_count;\r\n    final_path = backtrackPath(neighbours, \"end\");\r\n  } else {\r\n    const till_checkpoint = dijkstra_algorithm(start_node, wait_time_factor, \"checkpoint\", board, no_of_rows, no_of_cols, 1);\r\n\r\n    const till_end = dijkstra_algorithm(board[CHECKPOINT.row][CHECKPOINT.col], wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, till_checkpoint.time_count);\r\n\r\n    result.visited_nodes = till_checkpoint.count_visited_nodes + till_end.count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = till_end.time_count;\r\n\r\n    let path_to_checkpoint = backtrackPath(till_checkpoint.neighbours, \"checkpoint\");\r\n    let path_to_end = backtrackPath(till_end.neighbours, \"end\");\r\n    final_path = path_to_end;\r\n    for (const path_node of path_to_checkpoint) {\r\n      final_path.push(path_node);\r\n    }\r\n  }\r\n\r\n\r\n  //PATH\r\n  let pathCost = 0;\r\n  for (let i = final_path.length - 1; i >= 0; i--) {\r\n    let { row, col, weight } = final_path[i];\r\n    pathCost += weight;\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"path\");\r\n      if (i == 0) {\r\n        setVisualizing(false);\r\n        setResult(result);\r\n      }\r\n    }, wait_time_factor * final_time_count);\r\n    final_time_count++;\r\n  }\r\n  result.path_cost = pathCost;\r\n}\r\n\r\nconst compareDescendingOrder = (a, b) => {\r\n  if (b.cummulativeSum === a.cummulativeSum) {\r\n    let b_sum = b.row + b.col;\r\n    let a_sum = a.row + a.col;\r\n    if (b_sum === a_sum) {\r\n      return a.col - b.col;\r\n\r\n    } else {\r\n      return b_sum - a_sum;\r\n    }\r\n  }\r\n  return b.cummulativeSum - a.cummulativeSum;\r\n}\r\n\r\nconst dijkstra_algorithm = (from_node, wait_time_factor, condition, board, no_of_rows, no_of_cols, time_count) => {\r\n  //DIJKSTRA ALGO\r\n  let neighbours = [{ ...from_node, cummulativeSum: 0 }];\r\n  let nodes_been_to_SPT = new Set([]);\r\n  let shortestPathTree = [{ ...from_node, cummulativeSum: 0 }];\r\n  nodes_been_to_SPT.add(`${from_node.row}-${from_node.col}`);\r\n  let visited_layer_css = condition === \"checkpoint\" ? \"visited_to_checkpoint\" : \"visited\";\r\n  setTimeout(() => {\r\n    document.querySelector(`#cell-${from_node.row}-${from_node.col} .cell`).classList.add(visited_layer_css);\r\n  }, wait_time_factor * time_count);\r\n  let isGoalReached = false;\r\n  let count_visited_nodes = 0;\r\n\r\n  while (!isGoalReached && shortestPathTree.length > 0) {\r\n    const choseNode = shortestPathTree.pop();\r\n    if (condition === \"end_node\") {\r\n      board[choseNode.row][choseNode.col].isVisited = true;\r\n      choseNode.isVisited = true;\r\n    } else if (condition === \"checkpoint\") {\r\n      board[choseNode.row][choseNode.col].isCheckpoint_visited = true;\r\n      choseNode.isCheckpoint_visited = true;\r\n    }\r\n    neighbours.push(choseNode);\r\n    count_visited_nodes++;\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${choseNode.row}-${choseNode.col} .cell`).classList.add(visited_layer_css);\r\n    }, wait_time_factor * time_count);\r\n    time_count++;\r\n    if (condition === \"end_node\" && board[choseNode.row][choseNode.col].isEnd) {\r\n      neighbours.push(choseNode);\r\n      isGoalReached = true;\r\n      break;\r\n    } else if (condition === \"checkpoint\" && board[choseNode.row][choseNode.col].isCheckPoint) {\r\n      neighbours.push(choseNode);\r\n      isGoalReached = true;\r\n      break;\r\n    }\r\n    //add visited class\r\n    let neighbour_nodes = find_neighbours(choseNode, no_of_rows, no_of_cols, board);\r\n    for (let node of neighbour_nodes) {\r\n      let { row, col, isWall, isVisited, isStart, isEnd, isCheckPoint, isCheckpoint_visited, weight } = node;\r\n      if (!isStart) {\r\n        node = {\r\n          ...node, parent: {\r\n            row: choseNode.row,\r\n            col: choseNode.col\r\n          },\r\n          cummulativeSum: choseNode.cummulativeSum + weight,\r\n        };\r\n      }\r\n      if (condition === \"end_node\") {\r\n        if ((!isWall || isEnd) && !isVisited && !isStart && !isCheckPoint && !nodes_been_to_SPT.has(`${row}-${col}`)) {\r\n          nodes_been_to_SPT.add(`${row}-${col}`);\r\n          shortestPathTree.push(node);\r\n          // neighbours.push(node);\r\n        }\r\n      } else if (condition === \"checkpoint\") {\r\n        if ((!isWall || isCheckPoint) && !isCheckpoint_visited && !isStart && !nodes_been_to_SPT.has(`${row}-${col}`)) {\r\n          nodes_been_to_SPT.add(`${row}-${col}`);\r\n          shortestPathTree.push(node);\r\n          //   neighbours.push(node);\r\n        }\r\n      }\r\n    }\r\n    shortestPathTree.sort(compareDescendingOrder);\r\n  }\r\n  return { neighbours: neighbours, count_visited_nodes: count_visited_nodes, time_count: time_count };\r\n}\r\n\r\nconst backtrackPath = (neighbours, to) => {\r\n  let path = [];\r\n  let neighbours_size = neighbours.length;\r\n  let count = neighbours_size - 1;\r\n  if (to === \"checkpoint\") {\r\n    if (neighbours[neighbours_size - 1].isCheckPoint) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  } else if (to === \"end\") {\r\n    if (neighbours[neighbours_size - 1].isEnd) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        if (node.isCheckPoint) {\r\n          break;\r\n        }\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  }\r\n  path.push(neighbours[0]);\r\n  return path;\r\n}\r\n\r\nconst find_neighbours = (node, rows, cols, board) => {\r\n  let { row, col } = node;\r\n  let arr = [];\r\n  if (col + 1 < cols && !board[row][col + 1].isVisited) {\r\n    arr.push(board[row][col + 1]);\r\n  }\r\n  if (row + 1 < rows && !board[row + 1][col].isVisited) {\r\n    arr.push(board[row + 1][col]);\r\n  }\r\n  if (col - 1 >= 0 && !board[row][col - 1].isVisited) {\r\n    arr.push(board[row][col - 1]);\r\n  }\r\n  if (row - 1 >= 0 && !board[row - 1][col].isVisited) {\r\n    arr.push(board[row - 1][col]);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport default visualize_Dijkstra;","const visualize_BFS = (board, setVisualizing, speed, setResult) => {\r\n  let result = {\r\n    algorithm: \"Breadth First Search\",\r\n    visited_nodes: 0,\r\n    time_taken: 0,\r\n    path_cost: 0\r\n  }\r\n\r\n  const t0 = performance.now();\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n  let CHECKPOINT = null;\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      if (board[i][j].isCheckPoint) {\r\n        CHECKPOINT = { row: i, col: j };\r\n      }\r\n    }\r\n  }\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 200;\r\n  }\r\n\r\n  //BFS & PATH\r\n  let final_path = null;\r\n  let final_time_count = 1;\r\n  if (CHECKPOINT === null) {\r\n    const { neighbours, count_visited_nodes, time_count } = bfs_algorithm(start_node, wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, 1);\r\n    result.visited_nodes = count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = time_count;\r\n    final_path = backtrackPath(neighbours, \"end\");\r\n\r\n    result.path_cost = final_path.length;\r\n  } else {\r\n    const till_checkpoint = bfs_algorithm(start_node, wait_time_factor, \"checkpoint\", board, no_of_rows, no_of_cols, 1);\r\n\r\n    const till_end = bfs_algorithm(board[CHECKPOINT.row][CHECKPOINT.col], wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, till_checkpoint.time_count);\r\n\r\n    result.visited_nodes = till_checkpoint.count_visited_nodes + till_end.count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = till_end.time_count;\r\n\r\n    let path_to_checkpoint = backtrackPath(till_checkpoint.neighbours, \"checkpoint\");\r\n    let path_to_end = backtrackPath(till_end.neighbours, \"end\");\r\n    final_path = path_to_end;\r\n    for (const path_node of path_to_checkpoint) {\r\n      final_path.push(path_node);\r\n    }\r\n\r\n    result.path_cost = final_path.length - 1;\r\n  }\r\n\r\n\r\n  //PATH\r\n  // const path = backtrackPath(neighbours);\r\n  for (let i = final_path.length - 1; i >= 0; i--) {\r\n    let { row, col } = final_path[i];\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"path\");\r\n      if (i == 0) {\r\n        setVisualizing(false);\r\n        setResult(result);\r\n      }\r\n    }, wait_time_factor * final_time_count);\r\n    final_time_count++;\r\n  }\r\n}\r\n\r\nconst bfs_algorithm = (from_node, wait_time_factor, condition, board, no_of_rows, no_of_cols, time_count) => {\r\n  //BFS ALGO\r\n  let neighbours = [from_node];\r\n  let visited_layer_css = condition === \"checkpoint\" ? \"visited_to_checkpoint\" : \"visited\";\r\n  setTimeout(() => {\r\n    document.querySelector(`#cell-${from_node.row}-${from_node.col} .cell`).classList.add(visited_layer_css);\r\n  }, wait_time_factor * time_count);\r\n  let isGoalReached = false;\r\n  var count = 0;\r\n  let count_visited_nodes = 0;\r\n\r\n  while (!isGoalReached && count < neighbours.length) {\r\n    let neighbour_nodes = find_neighbours(neighbours[count], no_of_rows, no_of_cols, board);\r\n    for (let node of neighbour_nodes) {\r\n      let { row, col, isWall, isVisited, isStart, isEnd, isCheckPoint, isCheckpoint_visited } = node;\r\n      if (!isStart) {\r\n        node = {\r\n          ...node, parent: {\r\n            row: neighbours[count].row,\r\n            col: neighbours[count].col\r\n          }\r\n        };\r\n      }\r\n      if (condition === \"end_node\") {\r\n        if (isEnd) {\r\n          neighbours.push(node);\r\n          isGoalReached = true;\r\n          break;\r\n        } else if (!isWall && !isVisited && !isStart && !isCheckPoint) {\r\n          neighbours.push(node);\r\n          board[row][col].isVisited = true;\r\n          count_visited_nodes++;\r\n          setTimeout(() => {\r\n            document.querySelector(`#cell-${row}-${col} .cell`).classList.add(visited_layer_css);\r\n          }, wait_time_factor * time_count);\r\n          time_count++;\r\n        }\r\n      } else if (condition === \"checkpoint\") {\r\n        if (isCheckPoint) {\r\n          neighbours.push(node);\r\n          isGoalReached = true;\r\n          break;\r\n        } else if (!isWall && !isCheckpoint_visited && !isStart) {\r\n          neighbours.push(node);\r\n          board[row][col].isCheckpoint_visited = true;\r\n          count_visited_nodes++;\r\n          setTimeout(() => {\r\n            document.querySelector(`#cell-${row}-${col} .cell`).classList.add(visited_layer_css);\r\n          }, wait_time_factor * time_count);\r\n          time_count++;\r\n        }\r\n      }\r\n    }\r\n    count++;\r\n  }\r\n  return { neighbours: neighbours, count_visited_nodes: count_visited_nodes, time_count: time_count };\r\n}\r\n\r\nconst backtrackPath = (neighbours, to) => {\r\n  let path = [];\r\n  let neighbours_size = neighbours.length;\r\n  let count = neighbours_size - 1;\r\n  if (to === \"checkpoint\") {\r\n    if (neighbours[neighbours_size - 1].isCheckPoint) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  } else if (to === \"end\") {\r\n    if (neighbours[neighbours_size - 1].isEnd) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  }\r\n  path.push(neighbours[0]);\r\n  return path;\r\n}\r\n\r\nconst find_neighbours = (node, rows, cols, board) => {\r\n  let { row, col } = node;\r\n  let arr = [];\r\n  if (col + 1 < cols) {\r\n    arr.push(board[row][col + 1]);\r\n  }\r\n  if (row + 1 < rows) {\r\n    arr.push(board[row + 1][col]);\r\n  }\r\n  if (col - 1 >= 0) {\r\n    arr.push(board[row][col - 1]);\r\n  }\r\n  if (row - 1 >= 0) {\r\n    arr.push(board[row - 1][col]);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport default visualize_BFS;","const visualize_DFS = (board, setVisualizing, speed, setResult) => {\r\n  let result = {\r\n    algorithm: \"Depth First Search\",\r\n    visited_nodes: 0,\r\n    time_taken: 0,\r\n    path_cost: 0\r\n  }\r\n\r\n  const t0 = performance.now();\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n  let CHECKPOINT = null;\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      if (board[i][j].isCheckPoint) {\r\n        CHECKPOINT = { row: i, col: j };\r\n      }\r\n    }\r\n  }\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 200;\r\n  }\r\n\r\n  //DFS & PATH\r\n  let final_path = null;\r\n  let final_time_count = 1;\r\n  if (CHECKPOINT === null) {\r\n    const { path, count_visited_nodes, time_count } = dfs_algorithm(start_node, wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, 1);\r\n    result.visited_nodes = count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = time_count;\r\n    final_path = backtrackPath(path, \"end\");\r\n\r\n    result.path_cost = final_path.length;\r\n  } else {\r\n    const till_checkpoint = dfs_algorithm(start_node, wait_time_factor, \"checkpoint\", board, no_of_rows, no_of_cols, 1);\r\n\r\n    const till_end = dfs_algorithm(board[CHECKPOINT.row][CHECKPOINT.col], wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, till_checkpoint.time_count);\r\n\r\n    result.visited_nodes = till_checkpoint.count_visited_nodes + till_end.count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = till_end.time_count;\r\n\r\n    let path_to_checkpoint = backtrackPath(till_checkpoint.path, \"checkpoint\");\r\n    let path_to_end = backtrackPath(till_end.path, \"end\");\r\n    final_path = path_to_end;\r\n    for (const path_node of path_to_checkpoint) {\r\n      final_path.push(path_node);\r\n    }\r\n    result.path_cost = final_path.length - 1;\r\n  }\r\n\r\n  //PATH\r\n  let pathCost = 0;\r\n  for (let i = final_path.length - 1; i >= 0; i--) {\r\n    let { row, col } = final_path[i];\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"path\");\r\n      if (i == 0) {\r\n        setVisualizing(false);\r\n        setResult(result);\r\n      }\r\n    }, wait_time_factor * final_time_count);\r\n    final_time_count++;\r\n  }\r\n}\r\n\r\nconst dfs_algorithm = (from_node, wait_time_factor, condition, board, no_of_rows, no_of_cols, time_count) => {\r\n  //DFS ALGO\r\n  let neighbours = [from_node];\r\n  let visited_layer_css = condition === \"checkpoint\" ? \"visited_to_checkpoint\" : \"visited\";\r\n  let isGoalReached = false;\r\n  let count_visited_nodes = 0;\r\n  let path = [];\r\n\r\n  while (!isGoalReached && neighbours.length > 0) {\r\n    let currNode = neighbours.pop();\r\n    path.push(currNode);\r\n    if (condition === \"end_node\") {\r\n      board[currNode.row][currNode.col].isVisited = true;\r\n      currNode.isVisited = true;\r\n    } else if (condition === \"checkpoint\") {\r\n      board[currNode.row][currNode.col].isCheckpoint_visited = true;\r\n      currNode.isCheckpoint_visited = true;\r\n    }\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${currNode.row}-${currNode.col} .cell`).classList.add(visited_layer_css);\r\n    }, wait_time_factor * time_count);\r\n    time_count++;\r\n    count_visited_nodes++;\r\n\r\n    if (condition === \"end_node\" && currNode.isEnd) {\r\n      isGoalReached = true;\r\n      break;\r\n    } else if (condition === \"checkpoint\" && currNode.isCheckPoint) {\r\n      isGoalReached = true;\r\n      break;\r\n    }\r\n\r\n    let neighbour_nodes = find_neighbours(currNode, no_of_rows, no_of_cols, board);\r\n    for (let node of neighbour_nodes) {\r\n      let { row, col, isWall, isVisited, isStart, isEnd, isCheckPoint, isCheckpoint_visited } = node;\r\n      if (!isStart) {\r\n        node = {\r\n          ...node, parent: {\r\n            row: currNode.row,\r\n            col: currNode.col\r\n          }\r\n        };\r\n      }\r\n      if (condition === \"end_node\") {\r\n        if ((!isWall || isEnd) && !isVisited && !isStart && !isCheckPoint) {\r\n          neighbours.push(node);\r\n        }\r\n      } else if (condition === \"checkpoint\") {\r\n        if ((!isWall || isCheckPoint) && !isCheckpoint_visited && !isStart) {\r\n          neighbours.push(node);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return { path: path, count_visited_nodes: count_visited_nodes, time_count: time_count };\r\n}\r\n\r\nconst backtrackPath = (neighbours, to) => {\r\n  let path = [];\r\n  let neighbours_size = neighbours.length;\r\n  let count = neighbours_size - 1;\r\n  if (to === \"checkpoint\") {\r\n    if (neighbours[neighbours_size - 1].isCheckPoint) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  } else if (to === \"end\") {\r\n    if (neighbours[neighbours_size - 1].isEnd) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  }\r\n  path.push(neighbours[0]);\r\n  return path;\r\n}\r\n\r\nconst find_neighbours = (node, rows, cols, board) => {\r\n  let { row, col } = node;\r\n  let arr = [];\r\n  if (col + 1 < cols && !board[row][col + 1].isVisited) {\r\n    arr.push(board[row][col + 1]);\r\n  }\r\n  if (row + 1 < rows && !board[row + 1][col].isVisited) {\r\n    arr.push(board[row + 1][col]);\r\n  }\r\n  if (col - 1 >= 0 && !board[row][col - 1].isVisited) {\r\n    arr.push(board[row][col - 1]);\r\n  }\r\n  if (row - 1 >= 0 && !board[row - 1][col].isVisited) {\r\n    arr.push(board[row - 1][col]);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport default visualize_DFS;","const visualize_Astar = (board, setVisualizing, speed, setResult) => {\r\n  let result = {\r\n    algorithm: \"Breadth First Search\",\r\n    visited_nodes: 0,\r\n    time_taken: 0,\r\n    path_cost: 0\r\n  }\r\n\r\n  const t0 = performance.now();\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n  let CHECKPOINT = null;\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      if (board[i][j].isCheckPoint) {\r\n        CHECKPOINT = { row: i, col: j };\r\n      }\r\n    }\r\n  }\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 200;\r\n  }\r\n\r\n  //ASTAR & PATH\r\n  let final_path = null;\r\n  let final_time_count = 1;\r\n  if (CHECKPOINT === null) {\r\n    const { CLOSED_LIST, count_visited_nodes, time_count } = astar_algorithm(start_node, end_node, wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, 1);\r\n    result.visited_nodes = count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = time_count;\r\n    final_path = backtrackPath(CLOSED_LIST, \"end\");\r\n  } else {\r\n    const till_checkpoint = astar_algorithm(start_node, CHECKPOINT, wait_time_factor, \"checkpoint\", board, no_of_rows, no_of_cols, 1);\r\n\r\n    const till_end = astar_algorithm(board[CHECKPOINT.row][CHECKPOINT.col], end_node, wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, till_checkpoint.time_count);\r\n\r\n    result.visited_nodes = till_checkpoint.count_visited_nodes + till_end.count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = till_end.time_count;\r\n\r\n    let path_to_checkpoint = backtrackPath(till_checkpoint.CLOSED_LIST, \"checkpoint\");\r\n    let path_to_end = backtrackPath(till_end.CLOSED_LIST, \"end\");\r\n    final_path = path_to_end;\r\n    for (const path_node of path_to_checkpoint) {\r\n      final_path.push(path_node);\r\n    }\r\n  }\r\n\r\n  //PATH\r\n  let pathCost = 0;\r\n  for (let i = final_path.length - 1; i >= 0; i--) {\r\n    let { row, col, weight } = final_path[i];\r\n    pathCost += weight;\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"path\");\r\n      if (i === 0) {\r\n        setVisualizing(false);\r\n        setResult(result);\r\n      }\r\n    }, wait_time_factor * final_time_count);\r\n    final_time_count++;\r\n  }\r\n  result.path_cost = pathCost;\r\n}\r\n\r\nconst compare_F_desc = (a, b) => {\r\n  let a_f = a.g + a.h;\r\n  let b_f = b.g + b.h;\r\n  if (b_f === a_f) {\r\n    // if (b.h === a.h) {\r\n    //   return b.g - a.g;\r\n    // }\r\n    return b.h - a.h;\r\n  }\r\n  return b_f - a_f;\r\n}\r\n\r\nconst manhattanDist = (a, b) => {\r\n  return Math.abs(a.row - b.row) + Math.abs(a.col - b.col);\r\n}\r\n\r\nconst lowerF_in_list = (list, currNode) => {\r\n  let { row, col, g, h } = currNode;\r\n  const foundNode = list.find(node => node.row === row && node.col === col);\r\n  if (!foundNode) {\r\n    return false;\r\n  } else {\r\n    if ((foundNode.g + foundNode.h) <= (g + h)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nconst astar_algorithm = (from_node, end_node, wait_time_factor, condition, board, no_of_rows, no_of_cols, time_count) => {\r\n  //Astar ALGO\r\n  let OPEN_LIST = [{ ...from_node, g: 0, h: 0 }];\r\n  let CLOSED_LIST = [];\r\n  let visited_layer_css = condition === \"checkpoint\" ? \"visited_to_checkpoint\" : \"visited\";\r\n  setTimeout(() => {\r\n    document.querySelector(`#cell-${from_node.row}-${from_node.col} .cell`).classList.add(visited_layer_css);\r\n  }, wait_time_factor * time_count);\r\n  let isGoalReached = false;\r\n  let count_visited_nodes = 0;\r\n\r\n  while (!isGoalReached && OPEN_LIST.length > 0) {\r\n    //POP LOWEST f FROM OPEN_LIST\r\n    let choseNode = OPEN_LIST.pop();\r\n\r\n    if (condition === \"end_node\") {\r\n      board[choseNode.row][choseNode.col].isVisited = true;\r\n      choseNode.isVisited = true;\r\n      if (board[choseNode.row][choseNode.col].isEnd) {\r\n        CLOSED_LIST.push(choseNode);\r\n        isGoalReached = true;\r\n        break;\r\n      }\r\n    } else if (condition === \"checkpoint\") {\r\n      board[choseNode.row][choseNode.col].isCheckpoint_visited = true;\r\n      choseNode.isCheckpoint_visited = true;\r\n      if (board[choseNode.row][choseNode.col].isCheckPoint) {\r\n        CLOSED_LIST.push(choseNode);\r\n        isGoalReached = true;\r\n        break;\r\n      }\r\n    }\r\n    let neighbour_nodes = find_neighbours(choseNode, no_of_rows, no_of_cols, board);\r\n    for (let node of neighbour_nodes) {\r\n      let { row, col, isWall, isVisited, isStart, isEnd, isCheckPoint, isCheckpoint_visited, weight } = node;\r\n      if (!isStart) {\r\n        node = {\r\n          ...node, parent: {\r\n            row: choseNode.row,\r\n            col: choseNode.col\r\n          },\r\n          g: choseNode.g + weight,\r\n          h: manhattanDist(node, end_node)\r\n        };\r\n      }\r\n      if (lowerF_in_list(CLOSED_LIST, node)) {\r\n        continue;\r\n      }\r\n      if (lowerF_in_list(OPEN_LIST, node)) {\r\n        continue;\r\n      }\r\n      if (condition === \"end_node\") {\r\n        if ((!isWall || isEnd) && !isVisited && !isStart && !isCheckPoint) {\r\n          OPEN_LIST = OPEN_LIST.filter(element => element.row !== node.row || element.col !== node.col);\r\n          OPEN_LIST.push(node);\r\n        }\r\n      } else if (condition === \"checkpoint\") {\r\n        if ((!isWall || isCheckPoint) && !isCheckpoint_visited && !isStart) {\r\n          OPEN_LIST = OPEN_LIST.filter(element => element.row !== node.row || element.col !== node.col);\r\n          OPEN_LIST.push(node);\r\n        }\r\n      }\r\n    }\r\n    OPEN_LIST.sort(compare_F_desc);\r\n    CLOSED_LIST.push(choseNode);\r\n    count_visited_nodes++;\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${choseNode.row}-${choseNode.col} .cell`).classList.add(visited_layer_css);\r\n    }, wait_time_factor * time_count);\r\n    time_count++;\r\n  }\r\n  return { CLOSED_LIST: CLOSED_LIST, count_visited_nodes: count_visited_nodes, time_count: time_count };\r\n}\r\n\r\nconst backtrackPath = (neighbours, to) => {\r\n  let path = [];\r\n  let neighbours_size = neighbours.length;\r\n  let count = neighbours_size - 1;\r\n  if (to === \"checkpoint\") {\r\n    if (neighbours[neighbours_size - 1].isCheckPoint) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  } else if (to === \"end\") {\r\n    if (neighbours[neighbours_size - 1].isEnd) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  }\r\n  path.push(neighbours[0]);\r\n  return path;\r\n}\r\n\r\nconst find_neighbours = (node, rows, cols, board) => {\r\n  let { row, col } = node;\r\n  let arr = [];\r\n  // right bottom left top\r\n  if (col + 1 < cols && !board[row][col + 1].isVisited) {\r\n    arr.push(board[row][col + 1]);\r\n  }\r\n  if (row + 1 < rows && !board[row + 1][col].isVisited) {\r\n    arr.push(board[row + 1][col]);\r\n  }\r\n  if (col - 1 >= 0 && !board[row][col - 1].isVisited) {\r\n    arr.push(board[row][col - 1]);\r\n  }\r\n  if (row - 1 >= 0 && !board[row - 1][col].isVisited) {\r\n    arr.push(board[row - 1][col]);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport default visualize_Astar;","let time_count = 0;\r\n\r\nconst weightHexCage = (board, speed, weight, setVisualizing) => {\r\n  // let currWeight = 20;\r\n  // let currWeight_class = \"weight-m\";\r\n  let { currWeight, currWeight_class } = chooseWeight_Class(weight);\r\n\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n\r\n  let wait_time_factor = 60;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 100;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 140;\r\n  }\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      board[i][j].isWall = false;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"wall\");\r\n      board[i][j].isVisited = false;\r\n      board[i][j].isCheckpoint_visited = false;\r\n      board[i][j].weight = 1;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"path\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vl\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-l\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-m\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-h\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vh\");\r\n    }\r\n  }\r\n\r\n  let row_range = { from: 0, to: no_of_rows - 1 };\r\n  let col_range = { from: 0, to: no_of_cols - 1 };\r\n  time_count = 0;\r\n\r\n  for (let j = 0; j < no_of_cols; j++) {\r\n    let tmp1 = Math.abs((j % 6) - 3);\r\n    if (tmp1 < no_of_rows && !board[tmp1][j].isStart && !board[tmp1][j].isEnd && !board[tmp1][j].isCheckPoint) {\r\n      board[tmp1][j].weight = currWeight;\r\n      setTimeout(() => {\r\n        document.querySelector(`#cell-${tmp1}-${j} .cell`).classList.add(currWeight_class);\r\n      }, time_count * wait_time_factor);\r\n    }\r\n\r\n    let tmp2 = Math.abs(7 - tmp1);\r\n    if (tmp2 < no_of_rows && !board[tmp2][j].isStart && !board[tmp2][j].isEnd && !board[tmp2][j].isCheckPoint) {\r\n      board[tmp2][j].weight = currWeight;\r\n      setTimeout(() => {\r\n        document.querySelector(`#cell-${tmp2}-${j} .cell`).classList.add(currWeight_class);\r\n      }, time_count * wait_time_factor);\r\n    }\r\n\r\n    let tmp3 = 8 + tmp1;\r\n    if (tmp3 < no_of_rows && !board[tmp3][j].isStart && !board[tmp3][j].isEnd && !board[tmp3][j].isCheckPoint) {\r\n      board[tmp3][j].weight = currWeight;\r\n      setTimeout(() => {\r\n        document.querySelector(`#cell-${tmp3}-${j} .cell`).classList.add(currWeight_class);\r\n      }, time_count * wait_time_factor);\r\n    }\r\n\r\n    let tmp4 = Math.abs(15 - tmp1);\r\n    if (tmp4 < no_of_rows && !board[tmp4][j].isStart && !board[tmp4][j].isEnd && !board[tmp4][j].isCheckPoint) {\r\n      board[tmp4][j].weight = currWeight;\r\n      setTimeout(() => {\r\n        document.querySelector(`#cell-${tmp4}-${j} .cell`).classList.add(currWeight_class);\r\n      }, time_count * wait_time_factor);\r\n    }\r\n\r\n    let tmp5 = 16 + tmp1;\r\n    if (tmp5 < no_of_rows && !board[tmp5][j].isStart && !board[tmp5][j].isEnd && !board[tmp5][j].isCheckPoint) {\r\n      board[tmp5][j].weight = currWeight;\r\n      setTimeout(() => {\r\n        document.querySelector(`#cell-${tmp5}-${j} .cell`).classList.add(currWeight_class);\r\n      }, time_count * wait_time_factor);\r\n    }\r\n\r\n    let tmp6 = Math.abs(23 - tmp1);\r\n    if (tmp6 < no_of_rows && !board[tmp6][j].isStart && !board[tmp6][j].isEnd && !board[tmp6][j].isCheckPoint) {\r\n      board[tmp6][j].weight = currWeight;\r\n      setTimeout(() => {\r\n        document.querySelector(`#cell-${tmp6}-${j} .cell`).classList.add(currWeight_class);\r\n      }, time_count * wait_time_factor);\r\n    }\r\n\r\n    time_count++;\r\n  }\r\n  setTimeout(() => {\r\n    setVisualizing(false);\r\n  }, time_count * wait_time_factor);\r\n}\r\n\r\nconst chooseWeight_Class = (weight) => {\r\n  let currWeight = weight;\r\n  let currWeight_class = \"\";\r\n  if (weight === 5) {\r\n    currWeight_class = \"weight-vl\";\r\n  } else if (weight === 10) {\r\n    currWeight_class = \"weight-l\";\r\n  } else if (weight === 20) {\r\n    currWeight_class = \"weight-m\";\r\n  } else if (weight === 30) {\r\n    currWeight_class = \"weight-h\";\r\n  } else if (weight === 50) {\r\n    currWeight_class = \"weight-vh\";\r\n  }\r\n  return { currWeight, currWeight_class };\r\n}\r\n\r\nexport default weightHexCage;","import weightHexCage from \"../MazeAlgorithms/weightHexCage\";\r\n\r\nconst visualize_greedy = (board, setVisualizing, speed, setResult) => {\r\n  let result = {\r\n    algorithm: \"Greedy Best First Search\",\r\n    visited_nodes: 0,\r\n    time_taken: 0,\r\n    path_cost: 0\r\n  }\r\n\r\n  const t0 = performance.now();\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n  let CHECKPOINT = null;\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      if (board[i][j].isCheckPoint) {\r\n        CHECKPOINT = { row: i, col: j };\r\n      }\r\n    }\r\n  }\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 200;\r\n  }\r\n\r\n  //GreedyBFS & PATH\r\n  let final_path = null;\r\n  let final_time_count = 1;\r\n  if (CHECKPOINT === null) {\r\n    const { CLOSED_LIST, count_visited_nodes, time_count } = greedy_algorithm(start_node, end_node, wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, 1);\r\n    result.visited_nodes = count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = time_count;\r\n    final_path = backtrackPath(CLOSED_LIST, \"end\");\r\n  } else {\r\n    const till_checkpoint = greedy_algorithm(start_node, CHECKPOINT, wait_time_factor, \"checkpoint\", board, no_of_rows, no_of_cols, 1);\r\n\r\n    const till_end = greedy_algorithm(board[CHECKPOINT.row][CHECKPOINT.col], end_node, wait_time_factor, \"end_node\", board, no_of_rows, no_of_cols, till_checkpoint.time_count);\r\n\r\n    result.visited_nodes = till_checkpoint.count_visited_nodes + till_end.count_visited_nodes;\r\n\r\n    const t1 = performance.now();\r\n    result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n    final_time_count = till_end.time_count;\r\n\r\n    let path_to_checkpoint = backtrackPath(till_checkpoint.CLOSED_LIST, \"checkpoint\");\r\n    let path_to_end = backtrackPath(till_end.CLOSED_LIST, \"end\");\r\n    final_path = path_to_end;\r\n    for (const path_node of path_to_checkpoint) {\r\n      final_path.push(path_node);\r\n    }\r\n  }\r\n\r\n\r\n  //PATH\r\n  let pathCost = 0;\r\n  for (let i = final_path.length - 1; i >= 0; i--) {\r\n    let { row, col, weight } = final_path[i];\r\n    pathCost += weight;\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"path\");\r\n      if (i == 0) {\r\n        setVisualizing(false);\r\n        setResult(result);\r\n      }\r\n    }, wait_time_factor * final_time_count);\r\n    final_time_count++;\r\n  }\r\n  result.path_cost = pathCost;\r\n}\r\n\r\nconst compare_F_desc = (a, b) => {\r\n  let a_f = a.g + a.h;\r\n  let b_f = b.g + b.h;\r\n  if (b_f === a_f) {\r\n    if (b.h === a.h) {\r\n      return b.g - a.g;\r\n    }\r\n    return b.h - a.h;\r\n  }\r\n  return b_f - a_f;\r\n}\r\n\r\nconst manhattanDist = (a, b) => {\r\n  return Math.abs(a.row - b.row) + Math.abs(a.col - b.col);\r\n}\r\n\r\nconst lowerF_in_list = (list, currNode) => {\r\n  let { row, col, g, h } = currNode;\r\n  const foundNode = list.find(node => node.row === row && node.col === col);\r\n  if (!foundNode) {\r\n    return false;\r\n  } else {\r\n    if ((foundNode.g + foundNode.h) <= (g + h)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nconst greedy_algorithm = (from_node, end_node, wait_time_factor, condition, board, no_of_rows, no_of_cols, time_count) => {\r\n  //GREEDY BFS ALGO\r\n  let OPEN_LIST = [{ ...from_node, g: 0, h: 0 }];\r\n  let CLOSED_LIST = [];\r\n  let visited_layer_css = condition === \"checkpoint\" ? \"visited_to_checkpoint\" : \"visited\";\r\n  setTimeout(() => {\r\n    document.querySelector(`#cell-${from_node.row}-${from_node.col} .cell`).classList.add(visited_layer_css);\r\n  }, wait_time_factor * time_count);\r\n  let isGoalReached = false;\r\n  let count_visited_nodes = 0;\r\n\r\n  while (!isGoalReached && OPEN_LIST.length > 0) {\r\n    //POP LOWEST f FROM OPEN_LIST\r\n    let choseNode = OPEN_LIST.pop();\r\n\r\n    if (condition === \"end_node\") {\r\n      board[choseNode.row][choseNode.col].isVisited = true;\r\n      choseNode.isVisited = true;\r\n      if (board[choseNode.row][choseNode.col].isEnd) {\r\n        CLOSED_LIST.push(choseNode);\r\n        isGoalReached = true;\r\n        break;\r\n      }\r\n    } else if (condition === \"checkpoint\") {\r\n      board[choseNode.row][choseNode.col].isCheckpoint_visited = true;\r\n      choseNode.isCheckpoint_visited = true;\r\n      if (board[choseNode.row][choseNode.col].isCheckPoint) {\r\n        CLOSED_LIST.push(choseNode);\r\n        isGoalReached = true;\r\n        break;\r\n      }\r\n    }\r\n    let neighbour_nodes = find_neighbours(choseNode, no_of_rows, no_of_cols, board);\r\n    for (let node of neighbour_nodes) {\r\n      let { row, col, isWall, isVisited, isStart, isEnd, isCheckPoint, isCheckpoint_visited, weight } = node;\r\n      if (!isStart) {\r\n        node = {\r\n          ...node, parent: {\r\n            row: choseNode.row,\r\n            col: choseNode.col\r\n          },\r\n          g: weight,\r\n          h: manhattanDist(node, end_node)\r\n        };\r\n      }\r\n      if (lowerF_in_list(CLOSED_LIST, node)) {\r\n        continue;\r\n      }\r\n      if (lowerF_in_list(OPEN_LIST, node)) {\r\n        continue;\r\n      }\r\n      if (condition === \"end_node\") {\r\n        if ((!isWall || isEnd) && !isVisited && !isStart && !isCheckPoint) {\r\n          OPEN_LIST = OPEN_LIST.filter(element => element.row !== node.row || element.col !== node.col);\r\n          OPEN_LIST.push(node);\r\n        }\r\n      } else if (condition === \"checkpoint\") {\r\n        if ((!isWall || isCheckPoint) && !isCheckpoint_visited && !isStart) {\r\n          OPEN_LIST = OPEN_LIST.filter(element => element.row !== node.row || element.col !== node.col);\r\n          OPEN_LIST.push(node);\r\n        }\r\n      }\r\n    }\r\n    OPEN_LIST.sort(compare_F_desc);\r\n    CLOSED_LIST.push(choseNode);\r\n    count_visited_nodes++;\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${choseNode.row}-${choseNode.col} .cell`).classList.add(visited_layer_css);\r\n    }, wait_time_factor * time_count);\r\n    time_count++;\r\n  }\r\n  return { CLOSED_LIST: CLOSED_LIST, count_visited_nodes: count_visited_nodes, time_count: time_count };\r\n}\r\n\r\nconst backtrackPath = (neighbours, to) => {\r\n  let path = [];\r\n  let neighbours_size = neighbours.length;\r\n  let count = neighbours_size - 1;\r\n  if (to === \"checkpoint\") {\r\n    if (neighbours[neighbours_size - 1].isCheckPoint) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  } else if (to === \"end\") {\r\n    if (neighbours[neighbours_size - 1].isEnd) {\r\n      let node = neighbours[count];\r\n      while (!(node.isStart) && count > 0) {\r\n        path.push(node);\r\n        let { row, col } = node.parent;\r\n        //find parent\r\n        while (count > 0 && (neighbours[count].row !== row || neighbours[count].col !== col)) {\r\n          count--;\r\n        }\r\n        node = neighbours[count];\r\n      }\r\n    }\r\n  }\r\n  path.push(neighbours[0]);\r\n  return path;\r\n}\r\n\r\nconst find_neighbours = (node, rows, cols, board) => {\r\n  let { row, col } = node;\r\n  let arr = [];\r\n  // right bottom left top\r\n  if (col + 1 < cols && !board[row][col + 1].isVisited) {\r\n    arr.push(board[row][col + 1]);\r\n  }\r\n  if (row + 1 < rows && !board[row + 1][col].isVisited) {\r\n    arr.push(board[row + 1][col]);\r\n  }\r\n  if (col - 1 >= 0 && !board[row][col - 1].isVisited) {\r\n    arr.push(board[row][col - 1]);\r\n  }\r\n  if (row - 1 >= 0 && !board[row - 1][col].isVisited) {\r\n    arr.push(board[row - 1][col]);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport default visualize_greedy;","const visualize_biBFS = (board, setVisualizing, speed, setResult) => {\r\n  let result = {\r\n    algorithm: \"Bi-Directional Breadth First Search\",\r\n    visited_nodes: 0,\r\n    time_taken: 0,\r\n    path_cost: 0\r\n  }\r\n\r\n  const t0 = performance.now();\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n  let CHECKPOINT = null;\r\n\r\n  let tmpBoard = [];\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    let tmpRow = [];\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      tmpRow.push({ ...board[i][j], visited_from_start: false, visited_from_end: false });\r\n    }\r\n    tmpBoard.push(tmpRow);\r\n  }\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 200;\r\n  }\r\n\r\n  //BIBFS & PATH\r\n  let final_path = [];\r\n  let final_time_count = 1;\r\n  const { queue_from_start, queue_from_end, intersection_node, count_visited_nodes, time_count } = bibfs_algorithm(start_node, end_node, wait_time_factor, board, tmpBoard, no_of_rows, no_of_cols, 1);\r\n  result.visited_nodes = count_visited_nodes;\r\n\r\n  const t1 = performance.now();\r\n  result.time_taken = (t1 - t0).toFixed(3);\r\n\r\n  final_time_count = time_count;\r\n  if (intersection_node) {\r\n    final_path = backtrackPath(queue_from_start, queue_from_end, intersection_node);\r\n  }\r\n  result.path_cost = final_path.length;\r\n\r\n  // PATH\r\n  for (let i = final_path.length - 1; i >= 0; i--) {\r\n    let { row, col } = final_path[i];\r\n    setTimeout(() => {\r\n      document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"path\");\r\n      if (i == 0) {\r\n        setVisualizing(false);\r\n        setResult(result);\r\n      }\r\n    }, wait_time_factor * final_time_count);\r\n    final_time_count++;\r\n  }\r\n  if (!intersection_node) {\r\n    setTimeout(() => {\r\n      setVisualizing(false);\r\n      setResult(result);\r\n    }, wait_time_factor * final_time_count);\r\n  }\r\n}\r\n\r\nconst bibfs_algorithm = (from_node, end_node, wait_time_factor, board, tmpBoard, no_of_rows, no_of_cols, time_count) => {\r\n  //BIBFS ALGO\r\n  let queue_from_start = [from_node];\r\n  let queue_from_end = [end_node];\r\n  let intersection_node = null;\r\n  let time_count_from_start = time_count;\r\n  let time_count_from_end = time_count;\r\n\r\n  setTimeout(() => {\r\n    document.querySelector(`#cell-${from_node.row}-${from_node.col} .cell`).classList.add(\"visited\");\r\n    document.querySelector(`#cell-${end_node.row}-${end_node.col} .cell`).classList.add(\"visited\");\r\n  }, wait_time_factor * time_count);\r\n  let isGoalReached = false;\r\n  var count_from_start = 0;\r\n  var count_from_end = 0;\r\n  let count_visited_nodes = 0;\r\n\r\n  while (!isGoalReached && (count_from_start < queue_from_start.length || count_from_end < queue_from_end.length)) {\r\n    //FROM START POINT\r\n    let neighbours_start = [];\r\n    if (queue_from_start[count_from_start]) {\r\n      neighbours_start = find_neighbours(queue_from_start[count_from_start], no_of_rows, no_of_cols, board);\r\n    } else {\r\n      count_from_start--;\r\n    }\r\n\r\n    for (let node of neighbours_start) {\r\n      let { row, col, isWall, isVisited, isStart, isEnd, isCheckPoint, isCheckpoint_visited } = node;\r\n      if (!isStart) {\r\n        node = {\r\n          ...node, parent: {\r\n            row: queue_from_start[count_from_start].row,\r\n            col: queue_from_start[count_from_start].col\r\n          }\r\n        };\r\n      }\r\n      if (tmpBoard[row][col].visited_from_end) {\r\n        queue_from_start.push(node);\r\n        intersection_node = node;\r\n        isGoalReached = true;\r\n        break;\r\n      } else if (!isWall && !isVisited && !isStart) {\r\n        queue_from_start.push(node);\r\n        board[row][col].isVisited = true;\r\n        tmpBoard[row][col].visited_from_start = true;\r\n        count_visited_nodes++;\r\n        setTimeout(() => {\r\n          document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"visited\");\r\n        }, wait_time_factor * time_count_from_start);\r\n        time_count_from_start++;\r\n      }\r\n    }\r\n    count_from_start++;\r\n\r\n    //FROM END POINT\r\n    let neighbours_end = [];\r\n    if (queue_from_end[count_from_end]) {\r\n      neighbours_end = find_neighbours(queue_from_end[count_from_end], no_of_rows, no_of_cols, board);\r\n    } else {\r\n      count_from_end--;\r\n    }\r\n\r\n    for (let node of neighbours_end) {\r\n      let { row, col, isWall, isVisited, isStart, isEnd, isCheckPoint, isCheckpoint_visited } = node;\r\n      if (!isStart) {\r\n        node = {\r\n          ...node, parent: {\r\n            row: queue_from_end[count_from_end].row,\r\n            col: queue_from_end[count_from_end].col\r\n          }\r\n        };\r\n      }\r\n      if (tmpBoard[row][col].visited_from_start) {\r\n        queue_from_end.push(node);\r\n        intersection_node = node;\r\n        isGoalReached = true;\r\n        break;\r\n      } else if (!isWall && !isVisited && !isStart) {\r\n        queue_from_end.push(node);\r\n        board[row][col].isVisited = true;\r\n        tmpBoard[row][col].visited_from_end = true;\r\n        count_visited_nodes++;\r\n        setTimeout(() => {\r\n          document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"visited\");\r\n        }, wait_time_factor * time_count_from_end);\r\n        time_count_from_end++;\r\n      }\r\n    }\r\n    count_from_end++;\r\n  }\r\n  return {\r\n    queue_from_start: queue_from_start,\r\n    queue_from_end: queue_from_end,\r\n    intersection_node: intersection_node,\r\n    count_visited_nodes: count_visited_nodes,\r\n    time_count: Math.max(time_count_from_start, time_count_from_end)\r\n  };\r\n}\r\n\r\nconst backtrackPath = (queue_from_start, queue_from_end, intersection_node) => {\r\n  let path_intersection_to_end = [];\r\n  let queue_end_size = queue_from_end.length;\r\n  let count_end = queue_end_size - 1;\r\n\r\n  let path_start_to_intersection = [];\r\n  let queue_start_size = queue_from_start.length;\r\n  let count_start = queue_start_size - 1;\r\n\r\n  if (intersection_node.row === queue_from_end[queue_end_size - 1].row && intersection_node.col === queue_from_end[queue_end_size - 1].col) {\r\n    while (queue_from_start[count_start].row !== intersection_node.row || queue_from_start[count_start].col !== intersection_node.col) {\r\n      count_start--;\r\n    }\r\n  } else if (intersection_node.row === queue_from_start[queue_start_size - 1].row && intersection_node.col === queue_from_start[queue_start_size - 1].col) {\r\n    while (queue_from_end[count_end].row !== intersection_node.row || queue_from_end[count_end].col !== intersection_node.col) {\r\n      count_end--;\r\n    }\r\n  }\r\n\r\n  let node = queue_from_end[count_end];\r\n  while (!(node.isEnd) && count_end > 0) {\r\n    path_intersection_to_end.push(node);\r\n    let { row, col } = node.parent;\r\n    //find parent\r\n    while (count_end > 0 && (queue_from_end[count_end].row !== row || queue_from_end[count_end].col !== col)) {\r\n      count_end--;\r\n    }\r\n    node = queue_from_end[count_end];\r\n  }\r\n  path_intersection_to_end.push(queue_from_end[0]);\r\n\r\n  node = queue_from_start[count_start];\r\n  while (!(node.isStart) && count_start > 0) {\r\n    path_start_to_intersection.push(node);\r\n    let { row, col } = node.parent;\r\n    //find parent\r\n    while (count_start > 0 && (queue_from_start[count_start].row !== row || queue_from_start[count_start].col !== col)) {\r\n      count_start--;\r\n    }\r\n    node = queue_from_start[count_start];\r\n  }\r\n  path_start_to_intersection.push(queue_from_start[0]);\r\n  let final_path = [];\r\n  for (let k = path_intersection_to_end.length - 1; k >= 0; k--) {\r\n    final_path.push(path_intersection_to_end[k]);\r\n  }\r\n  for (const path_node of path_start_to_intersection) {\r\n    final_path.push(path_node);\r\n  }\r\n  return final_path;\r\n}\r\n\r\nconst find_neighbours = (node, rows, cols, board) => {\r\n  let { row, col } = node;\r\n  let arr = [];\r\n  if (col + 1 < cols) {\r\n    arr.push(board[row][col + 1]);\r\n  }\r\n  if (row + 1 < rows) {\r\n    arr.push(board[row + 1][col]);\r\n  }\r\n  if (col - 1 >= 0) {\r\n    arr.push(board[row][col - 1]);\r\n  }\r\n  if (row - 1 >= 0) {\r\n    arr.push(board[row - 1][col]);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport default visualize_biBFS;","let time_count = 0;\r\n\r\nconst recursiveDivision = (board, speed, weight, setVisualizing) => {\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 100;\r\n  }\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      board[i][j].isWall = false;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"wall\");\r\n      board[i][j].isVisited = false;\r\n      board[i][j].isCheckpoint_visited = false;\r\n      board[i][j].weight = 1;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"path\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vl\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-l\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-m\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-h\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vh\");\r\n    }\r\n  }\r\n\r\n  let row_range = { from: 0, to: no_of_rows - 1 };\r\n  let col_range = { from: 0, to: no_of_cols - 1 };\r\n  time_count = 0;\r\n\r\n  divideChamber(board, row_range, col_range, 0, wait_time_factor);\r\n  setTimeout(() => {\r\n    setVisualizing(false);\r\n  }, time_count * wait_time_factor);\r\n}\r\n\r\nconst randomNumber = (from, to, avoid) => {\r\n  if (avoid.length === 0) {\r\n    return Math.floor(from + (Math.random() * (to - from)));\r\n  }\r\n  let arr = [];\r\n  for (let i = from; i <= to; i++) {\r\n    if (!avoid.includes(i)) {\r\n      arr.push(i);\r\n    }\r\n  }\r\n  if (arr.length > 0) {\r\n    return arr[Math.floor(Math.random() * arr.length)];\r\n  } else {\r\n    return -1;\r\n  }\r\n}\r\n\r\n//ROW_OR_COL : 0 -> ROW  |  1 -> COL\r\nconst divideChamber = (board, row_range, col_range, row_or_col, wait_time_factor) => {\r\n  if (row_range.to - row_range.from < 2 || col_range.to - col_range.from < 2) {\r\n    return;\r\n  }\r\n\r\n  let BOARD_ROWS = board.length;\r\n  let BOARD_COLS = board[0].length;\r\n\r\n  let random_line = 0;\r\n  let random_cell = 0;\r\n\r\n  let doors = {\r\n    top: -1,\r\n    left: -1,\r\n    right: -1,\r\n    bottom: -1\r\n  }\r\n  if ((row_range.from) - 1 >= 0) {\r\n    for (let d = col_range.from; d <= col_range.to; d++) {\r\n      if (!board[row_range.from - 1][d].isWall) {\r\n        doors.top = d;\r\n      }\r\n    }\r\n  }\r\n  if ((row_range.to) + 1 < BOARD_ROWS) {\r\n    for (let d = col_range.from; d <= col_range.to; d++) {\r\n      if (!board[row_range.to + 1][d].isWall) {\r\n        doors.bottom = d;\r\n      }\r\n    }\r\n  }\r\n  if ((col_range.from) - 1 >= 0) {\r\n    for (let d = row_range.from; d <= row_range.to; d++) {\r\n      if (!board[d][col_range.from - 1].isWall) {\r\n        doors.left = d;\r\n      }\r\n    }\r\n  }\r\n  if ((col_range.to) + 1 < BOARD_COLS) {\r\n    for (let d = row_range.from; d <= row_range.to; d++) {\r\n      if (!board[d][col_range.to + 1].isWall) {\r\n        doors.right = d;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (row_or_col === 0) {\r\n    //ROW-WISE\r\n    random_line = randomNumber(row_range.from + 1, row_range.to - 1, [doors.left, doors.right]);\r\n    if (random_line === -1) {\r\n      return;\r\n    }\r\n    random_cell = randomNumber(col_range.from, col_range.to, []);\r\n\r\n    for (let i = col_range.from; i <= col_range.to; i++) {\r\n      if (!(board[random_line][i].isStart) && !(board[random_line][i].isEnd)) {\r\n        if (random_cell !== i) {\r\n          board[random_line][i].isWall = true;\r\n          setTimeout(() => {\r\n            document.querySelector(`#cell-${random_line}-${i} .cell`).classList.add(\"wall\");\r\n          }, time_count * wait_time_factor);\r\n          time_count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let row_range1 = {\r\n      from: row_range.from,\r\n      to: random_line - 1\r\n    }\r\n    if (col_range.to - col_range.from > row_range1.to - row_range1.from) {\r\n      divideChamber(board, row_range1, col_range, 1, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range1, col_range, 0, wait_time_factor);\r\n    }\r\n    let row_range2 = {\r\n      from: random_line + 1,\r\n      to: row_range.to\r\n    }\r\n    if (col_range.to - col_range.from > row_range2.to - row_range2.from) {\r\n      divideChamber(board, row_range2, col_range, 1, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range2, col_range, 0, wait_time_factor);\r\n    }\r\n  } else if (row_or_col === 1) {\r\n    //COL-WISE\r\n    random_line = randomNumber(col_range.from + 1, col_range.to - 1, [doors.top, doors.bottom]);\r\n    if (random_line === -1) {\r\n      return;\r\n    }\r\n    random_cell = randomNumber(row_range.from, row_range.to, []);\r\n\r\n    for (let i = row_range.from; i <= row_range.to; i++) {\r\n      if (!(board[i][random_line].isStart) && !(board[i][random_line].isEnd)) {\r\n        if (random_cell !== i) {\r\n          board[i][random_line].isWall = true;\r\n          setTimeout(() => {\r\n            document.querySelector(`#cell-${i}-${random_line} .cell`).classList.add(\"wall\");\r\n          }, time_count * wait_time_factor);\r\n          time_count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let col_range1 = {\r\n      from: col_range.from,\r\n      to: random_line - 1\r\n    }\r\n    if (row_range.to - row_range.from > col_range1.to - col_range1.from) {\r\n      divideChamber(board, row_range, col_range1, 0, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range, col_range1, 1, wait_time_factor);\r\n    }\r\n    let col_range2 = {\r\n      from: random_line + 1,\r\n      to: col_range.to\r\n    }\r\n    if (row_range.to - row_range.from > col_range2.to - col_range2.from) {\r\n      divideChamber(board, row_range, col_range2, 0, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range, col_range2, 1, wait_time_factor);\r\n    }\r\n  }\r\n}\r\n\r\nexport default recursiveDivision;","let time_count = 0;\r\n\r\nconst concentricMaze = (board, speed, weight, setVisualizing) => {\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 10;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 60;\r\n  }\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      board[i][j].isWall = false;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"wall\");\r\n      board[i][j].isVisited = false;\r\n      board[i][j].isCheckpoint_visited = false;\r\n      board[i][j].weight = 1;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"path\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vl\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-l\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-m\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-h\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vh\");\r\n    }\r\n  }\r\n\r\n  let row_range = { from: 0, to: no_of_rows - 1 };\r\n  let col_range = { from: 0, to: no_of_cols - 1 };\r\n  time_count = 0;\r\n\r\n  let middle_row = row_range.to / 2;\r\n  let middle_col = col_range.to / 2;\r\n  let center = {\r\n    row: randomNumber(middle_row - 5, middle_row + 5),\r\n    col: randomNumber(middle_col - 10, middle_col + 10)\r\n  }\r\n  let distance = 1;\r\n  while (distance < col_range.to) {\r\n    let i_from = Math.max(row_range.from, center.row - distance);\r\n    let i_to = Math.min(row_range.to, center.row + distance);\r\n    let i_leave = randomNumber(i_from, i_to);\r\n    let col_leave = randomNumber((center.col - distance) >= 0 ? center.col - distance : 0,\r\n      (center.col + distance) < col_range.to ? center.col + distance : col_range.to);\r\n    for (let i = i_from; i <= i_to; i++) {\r\n      if (i === i_leave) {\r\n        continue;\r\n      }\r\n      let col1 = center.col + Math.abs(distance - Math.abs(center.row - i));\r\n      let col2 = center.col - Math.abs(distance - Math.abs(center.row - i));\r\n      if (col1 === col_leave || col2 === col_leave) {\r\n        continue;\r\n      }\r\n      if (col1 <= col_range.to && col1 >= col_range.from && !board[i][col1].isStart && !board[i][col1].isEnd) {\r\n        board[i][col1].isWall = true;\r\n        setTimeout(() => {\r\n          document.querySelector(`#cell-${i}-${col1} .cell`).classList.add(\"wall\");\r\n        }, time_count * wait_time_factor);\r\n        time_count++;\r\n      }\r\n      if (col2 <= col_range.to && col2 >= col_range.from && !board[i][col2].isStart && !board[i][col2].isEnd) {\r\n        board[i][col2].isWall = true;\r\n        setTimeout(() => {\r\n          document.querySelector(`#cell-${i}-${col2} .cell`).classList.add(\"wall\");\r\n        }, time_count * wait_time_factor);\r\n        time_count++;\r\n      }\r\n    }\r\n    distance = distance + 5;\r\n  }\r\n\r\n  setTimeout(() => {\r\n    setVisualizing(false);\r\n  }, time_count * wait_time_factor);\r\n}\r\n\r\nconst randomNumber = (from, to) => {\r\n  return Math.floor(from + (Math.random() * (to - from)));\r\n}\r\n\r\nexport default concentricMaze;","let time_count = 0;\r\n\r\nconst recurDivVertical = (board, speed, weight, setVisualizing) => {\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 100;\r\n  }\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      board[i][j].isWall = false;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"wall\");\r\n      board[i][j].isVisited = false;\r\n      board[i][j].isCheckpoint_visited = false;\r\n      board[i][j].weight = 1;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"path\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vl\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-l\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-m\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-h\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vh\");\r\n    }\r\n  }\r\n\r\n  let row_range = { from: 0, to: no_of_rows - 1 };\r\n  let col_range = { from: 0, to: no_of_cols - 1 };\r\n  time_count = 0;\r\n\r\n  divideChamber(board, row_range, col_range, 0, wait_time_factor);\r\n  setTimeout(() => {\r\n    setVisualizing(false);\r\n  }, time_count * wait_time_factor);\r\n}\r\n\r\nconst randomNumber = (from, to, avoid) => {\r\n  if (avoid.length === 0) {\r\n    return Math.floor(from + (Math.random() * (to - from)));\r\n  }\r\n  let arr = [];\r\n  for (let i = from; i <= to; i++) {\r\n    if (!avoid.includes(i)) {\r\n      arr.push(i);\r\n    }\r\n  }\r\n  if (arr.length > 0) {\r\n    return arr[Math.floor(Math.random() * arr.length)];\r\n  } else {\r\n    return -1;\r\n  }\r\n}\r\n\r\n//ROW_OR_COL : 0 -> ROW  |  1 -> COL\r\nconst divideChamber = (board, row_range, col_range, row_or_col, wait_time_factor) => {\r\n  if (row_range.to - row_range.from < 2 || col_range.to - col_range.from < 2) {\r\n    return;\r\n  }\r\n\r\n  let BOARD_ROWS = board.length;\r\n  let BOARD_COLS = board[0].length;\r\n\r\n  let random_line = 0;\r\n  let random_cell = 0;\r\n\r\n  let doors = {\r\n    top: -1,\r\n    left: -1,\r\n    right: -1,\r\n    bottom: -1\r\n  }\r\n  if ((row_range.from) - 1 >= 0) {\r\n    for (let d = col_range.from; d <= col_range.to; d++) {\r\n      if (!board[row_range.from - 1][d].isWall) {\r\n        doors.top = d;\r\n      }\r\n    }\r\n  }\r\n  if ((row_range.to) + 1 < BOARD_ROWS) {\r\n    for (let d = col_range.from; d <= col_range.to; d++) {\r\n      if (!board[row_range.to + 1][d].isWall) {\r\n        doors.bottom = d;\r\n      }\r\n    }\r\n  }\r\n  if ((col_range.from) - 1 >= 0) {\r\n    for (let d = row_range.from; d <= row_range.to; d++) {\r\n      if (!board[d][col_range.from - 1].isWall) {\r\n        doors.left = d;\r\n      }\r\n    }\r\n  }\r\n  if ((col_range.to) + 1 < BOARD_COLS) {\r\n    for (let d = row_range.from; d <= row_range.to; d++) {\r\n      if (!board[d][col_range.to + 1].isWall) {\r\n        doors.right = d;\r\n      }\r\n    }\r\n  }\r\n  if (Math.random() > 0.25) {\r\n    row_or_col = 1;\r\n  } else {\r\n    row_or_col = 0;\r\n  }\r\n  if (row_or_col === 0) {\r\n    //ROW-WISE\r\n    random_line = randomNumber(row_range.from + 1, row_range.to - 1, [doors.left, doors.right]);\r\n    if (random_line === -1) {\r\n      return;\r\n    }\r\n    random_cell = randomNumber(col_range.from, col_range.to, []);\r\n\r\n    for (let i = col_range.from; i <= col_range.to; i++) {\r\n      if (!(board[random_line][i].isStart) && !(board[random_line][i].isEnd)) {\r\n        if (random_cell !== i) {\r\n          board[random_line][i].isWall = true;\r\n          setTimeout(() => {\r\n            document.querySelector(`#cell-${random_line}-${i} .cell`).classList.add(\"wall\");\r\n          }, time_count * wait_time_factor);\r\n          time_count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let row_range1 = {\r\n      from: row_range.from,\r\n      to: random_line - 1\r\n    }\r\n    if (col_range.to - col_range.from > row_range1.to - row_range1.from) {\r\n      divideChamber(board, row_range1, col_range, 1, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range1, col_range, 0, wait_time_factor);\r\n    }\r\n    let row_range2 = {\r\n      from: random_line + 1,\r\n      to: row_range.to\r\n    }\r\n    if (col_range.to - col_range.from > row_range2.to - row_range2.from) {\r\n      divideChamber(board, row_range2, col_range, 1, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range2, col_range, 0, wait_time_factor);\r\n    }\r\n  } else if (row_or_col === 1) {\r\n    //COL-WISE\r\n    random_line = randomNumber(col_range.from + 1, col_range.to - 1, [doors.top, doors.bottom]);\r\n    if (random_line === -1) {\r\n      return;\r\n    }\r\n    random_cell = randomNumber(row_range.from, row_range.to, []);\r\n\r\n    for (let i = row_range.from; i <= row_range.to; i++) {\r\n      if (!(board[i][random_line].isStart) && !(board[i][random_line].isEnd)) {\r\n        if (random_cell !== i) {\r\n          board[i][random_line].isWall = true;\r\n          setTimeout(() => {\r\n            document.querySelector(`#cell-${i}-${random_line} .cell`).classList.add(\"wall\");\r\n          }, time_count * wait_time_factor);\r\n          time_count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let col_range1 = {\r\n      from: col_range.from,\r\n      to: random_line - 1\r\n    }\r\n    if (row_range.to - row_range.from > col_range1.to - col_range1.from) {\r\n      divideChamber(board, row_range, col_range1, 0, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range, col_range1, 1, wait_time_factor);\r\n    }\r\n    let col_range2 = {\r\n      from: random_line + 1,\r\n      to: col_range.to\r\n    }\r\n    if (row_range.to - row_range.from > col_range2.to - col_range2.from) {\r\n      divideChamber(board, row_range, col_range2, 0, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range, col_range2, 1, wait_time_factor);\r\n    }\r\n  }\r\n}\r\n\r\nexport default recurDivVertical;","let time_count = 0;\r\n\r\nconst recurDivHorizontal = (board, speed, weight, setVisualizing) => {\r\n  let no_of_rows = board.length;\r\n  let no_of_cols = board[0].length;\r\n\r\n  let wait_time_factor = 20;\r\n  if (speed === \"fast\") {\r\n    wait_time_factor = 30;\r\n  } else if (speed === \"normal\") {\r\n    wait_time_factor = 60;\r\n  } else if (speed === \"slow\") {\r\n    wait_time_factor = 100;\r\n  }\r\n\r\n  let start_node = null;\r\n  let end_node = null;\r\n  for (let i = 0; i < no_of_rows; i++) {\r\n    for (let j = 0; j < no_of_cols; j++) {\r\n      if (board[i][j].isStart) {\r\n        start_node = board[i][j];\r\n      } else if (board[i][j].isEnd) {\r\n        end_node = board[i][j];\r\n      }\r\n      board[i][j].isWall = false;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"wall\");\r\n      board[i][j].isVisited = false;\r\n      board[i][j].isCheckpoint_visited = false;\r\n      board[i][j].weight = 1;\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"path\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vl\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-l\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-m\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-h\");\r\n      document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vh\");\r\n    }\r\n  }\r\n\r\n  let row_range = { from: 0, to: no_of_rows - 1 };\r\n  let col_range = { from: 0, to: no_of_cols - 1 };\r\n  time_count = 0;\r\n\r\n  divideChamber(board, row_range, col_range, 0, wait_time_factor);\r\n  setTimeout(() => {\r\n    setVisualizing(false);\r\n  }, time_count * wait_time_factor);\r\n}\r\n\r\nconst randomNumber = (from, to, avoid) => {\r\n  if (avoid.length === 0) {\r\n    return Math.floor(from + (Math.random() * (to - from)));\r\n  }\r\n  let arr = [];\r\n  for (let i = from; i <= to; i++) {\r\n    if (!avoid.includes(i)) {\r\n      arr.push(i);\r\n    }\r\n  }\r\n  if (arr.length > 0) {\r\n    return arr[Math.floor(Math.random() * arr.length)];\r\n  } else {\r\n    return -1;\r\n  }\r\n}\r\n\r\n//ROW_OR_COL : 0 -> ROW  |  1 -> COL\r\nconst divideChamber = (board, row_range, col_range, row_or_col, wait_time_factor) => {\r\n  if (row_range.to - row_range.from < 2 || col_range.to - col_range.from < 2) {\r\n    return;\r\n  }\r\n\r\n  let BOARD_ROWS = board.length;\r\n  let BOARD_COLS = board[0].length;\r\n\r\n  let random_line = 0;\r\n  let random_cell = 0;\r\n\r\n  let doors = {\r\n    top: -1,\r\n    left: -1,\r\n    right: -1,\r\n    bottom: -1\r\n  }\r\n  if ((row_range.from) - 1 >= 0) {\r\n    for (let d = col_range.from; d <= col_range.to; d++) {\r\n      if (!board[row_range.from - 1][d].isWall) {\r\n        doors.top = d;\r\n      }\r\n    }\r\n  }\r\n  if ((row_range.to) + 1 < BOARD_ROWS) {\r\n    for (let d = col_range.from; d <= col_range.to; d++) {\r\n      if (!board[row_range.to + 1][d].isWall) {\r\n        doors.bottom = d;\r\n      }\r\n    }\r\n  }\r\n  if ((col_range.from) - 1 >= 0) {\r\n    for (let d = row_range.from; d <= row_range.to; d++) {\r\n      if (!board[d][col_range.from - 1].isWall) {\r\n        doors.left = d;\r\n      }\r\n    }\r\n  }\r\n  if ((col_range.to) + 1 < BOARD_COLS) {\r\n    for (let d = row_range.from; d <= row_range.to; d++) {\r\n      if (!board[d][col_range.to + 1].isWall) {\r\n        doors.right = d;\r\n      }\r\n    }\r\n  }\r\n  if (Math.random() > 0.25) {\r\n    row_or_col = 0;\r\n  } else {\r\n    row_or_col = 1;\r\n  }\r\n  if (row_or_col === 0) {\r\n    //ROW-WISE\r\n    random_line = randomNumber(row_range.from + 1, row_range.to - 1, [doors.left, doors.right]);\r\n    if (random_line === -1) {\r\n      return;\r\n    }\r\n    random_cell = randomNumber(col_range.from, col_range.to, []);\r\n\r\n    for (let i = col_range.from; i <= col_range.to; i++) {\r\n      if (!(board[random_line][i].isStart) && !(board[random_line][i].isEnd)) {\r\n        if (random_cell !== i) {\r\n          board[random_line][i].isWall = true;\r\n          setTimeout(() => {\r\n            document.querySelector(`#cell-${random_line}-${i} .cell`).classList.add(\"wall\");\r\n          }, time_count * wait_time_factor);\r\n          time_count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let row_range1 = {\r\n      from: row_range.from,\r\n      to: random_line - 1\r\n    }\r\n    if (col_range.to - col_range.from > row_range1.to - row_range1.from) {\r\n      divideChamber(board, row_range1, col_range, 1, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range1, col_range, 0, wait_time_factor);\r\n    }\r\n    let row_range2 = {\r\n      from: random_line + 1,\r\n      to: row_range.to\r\n    }\r\n    if (col_range.to - col_range.from > row_range2.to - row_range2.from) {\r\n      divideChamber(board, row_range2, col_range, 1, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range2, col_range, 0, wait_time_factor);\r\n    }\r\n  } else if (row_or_col === 1) {\r\n    //COL-WISE\r\n    random_line = randomNumber(col_range.from + 1, col_range.to - 1, [doors.top, doors.bottom]);\r\n    if (random_line === -1) {\r\n      return;\r\n    }\r\n    random_cell = randomNumber(row_range.from, row_range.to, []);\r\n\r\n    for (let i = row_range.from; i <= row_range.to; i++) {\r\n      if (!(board[i][random_line].isStart) && !(board[i][random_line].isEnd)) {\r\n        if (random_cell !== i) {\r\n          board[i][random_line].isWall = true;\r\n          setTimeout(() => {\r\n            document.querySelector(`#cell-${i}-${random_line} .cell`).classList.add(\"wall\");\r\n          }, time_count * wait_time_factor);\r\n          time_count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    let col_range1 = {\r\n      from: col_range.from,\r\n      to: random_line - 1\r\n    }\r\n    if (row_range.to - row_range.from > col_range1.to - col_range1.from) {\r\n      divideChamber(board, row_range, col_range1, 0, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range, col_range1, 1, wait_time_factor);\r\n    }\r\n    let col_range2 = {\r\n      from: random_line + 1,\r\n      to: col_range.to\r\n    }\r\n    if (row_range.to - row_range.from > col_range2.to - col_range2.from) {\r\n      divideChamber(board, row_range, col_range2, 0, wait_time_factor);\r\n    } else {\r\n      divideChamber(board, row_range, col_range2, 1, wait_time_factor);\r\n    }\r\n  }\r\n}\r\n\r\nexport default recurDivHorizontal;","import visualize_Dijkstra from '../Algorithms/dijkstra';\r\nimport visualize_BFS from '../Algorithms/bfs';\r\nimport visualize_DFS from '../Algorithms/dfs';\r\nimport visualize_Astar from '../Algorithms/astar';\r\nimport visualize_greedy from '../Algorithms/greedyBFS';\r\nimport visualize_biBFS from '../Algorithms/bidirectionalBFS';\r\n\r\nimport recursiveDivision from '../MazeAlgorithms/recursiveDivision';\r\nimport weightHexCage from '../MazeAlgorithms/weightHexCage';\r\nimport concentricMaze from '../MazeAlgorithms/concentricMaze';\r\nimport recurDivVertical from '../MazeAlgorithms/recurDivVertical';\r\nimport recurDivHorizontal from '../MazeAlgorithms/recurDivHorizontal';\r\n\r\nlet OPTIONS = {\r\n  \"algorithm\": [\r\n    { name: \"Dijkstra's Algorithm\", value: \"dijkstra\", method: visualize_Dijkstra, isWeighted: true, checkPointNotAllowed: false },\r\n    { name: \"A* Search Algorithm\", value: \"astar\", method: visualize_Astar, isWeighted: true, checkPointNotAllowed: false },\r\n    { name: \"Breadth First Search\", value: \"bfs\", method: visualize_BFS, isWeighted: false, checkPointNotAllowed: false },\r\n    { name: \"Depth First Search\", value: \"dfs\", method: visualize_DFS, isWeighted: false, checkPointNotAllowed: false },\r\n    { name: \"Greedy Best First\", value: \"greedy\", method: visualize_greedy, isWeighted: true, checkPointNotAllowed: false },\r\n    { name: \"Bi-directional BFS\", value: \"biBFS\", method: visualize_biBFS, isWeighted: false, checkPointNotAllowed: true }\r\n  ],\r\n  \"speed\": [\r\n    { name: \"Fast\", value: \"fast\" },\r\n    { name: \"Normal\", value: \"normal\" },\r\n    { name: \"Slow\", value: \"slow\" }\r\n  ],\r\n  \"maze\": [\r\n    { name: \"Recursive Division\", method: recursiveDivision, value: \"recursive-div\" },\r\n    { name: \"Recursive Vertical Skew\", method: recurDivVertical, value: \"recursive-div-vertical\" },\r\n    { name: \"Recursive Horizontal Skew\", method: recurDivHorizontal, value: \"recursive-div-horizontal\" },\r\n    { name: \"Weight Hex Cage\", method: weightHexCage, value: \"weight-hex\" },\r\n    { name: \"Concentric Maze\", method: concentricMaze, value: \"concentric\" }\r\n  ],\r\n  \"weight\": [\r\n    { name: \"very less : 5\", value: 5 },\r\n    { name: \"less : 10\", value: 10 },\r\n    { name: \"moderate : 20\", value: 20 },\r\n    { name: \"high : 30\", value: 30 },\r\n    { name: \"very high : 50\", value: 50 }\r\n  ]\r\n}\r\n\r\nlet ALGO_DESC = {\r\n  \"\": \"Pick an Algorithm!\",\r\n  \"bfs\": \"Breadth-first Search is <strong>unweighted</strong> and <strong>guarantees</strong> the shortest path!\",\r\n  \"dijkstra\": \"Dijkstra's Algorithm is <strong>weighted</strong> and <strong>guarantees</strong> the shortest path!\",\r\n  \"astar\": \"A* Search is <strong>weighted</strong> and <strong>guarantees</strong> the shortest path!\",\r\n  \"dfs\": \"Depth-first Search is <strong>unweighted</strong> and does <strong>not guarantee</strong> the shortest path!\",\r\n  \"greedy\": \"Greedy Best-first Search is <strong>weighted</strong> and does <strong>not guarantee</strong> the shortest path!\",\r\n  \"biBFS\": \"Bi-Directional Breadth-First-Search is <strong>unweighted</strong> and <strong>guarantees</strong> the shortest path!\"\r\n}\r\n\r\nexport { OPTIONS, ALGO_DESC };","export default __webpack_public_path__ + \"static/media/amongus.eb23054d.JPG\";","export default __webpack_public_path__ + \"static/media/cool.25c80023.JPG\";","export default __webpack_public_path__ + \"static/media/weights.30ab056c.JPG\";","export default __webpack_public_path__ + \"static/media/checkpoint.2648948f.JPG\";","export default __webpack_public_path__ + \"static/media/results.10aeb94a.JPG\";","export default __webpack_public_path__ + \"static/media/WallsWeights.082c6e06.gif\";","import React, { useState } from 'react';\r\n\r\nimport page1Img from '../images/amongus.JPG';\r\nimport page2Img from '../images/cool.JPG';\r\nimport weights from '../images/weights.JPG';\r\nimport checkpoint from '../images/checkpoint.JPG';\r\nimport results from '../images/results.JPG';\r\nimport WallsWeights from '../images/WallsWeights.gif';\r\n\r\nimport '../styles/Guide.css';\r\n\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport ArrowLeftIcon from '@material-ui/icons/ArrowLeft';\r\n\r\nlet guide = {\r\n  1: {\r\n    heading: \"Welcome to Path Visualizer\",\r\n    subheading: \"Check out the features and options here\",\r\n    content: [\"You can simply skip the tutorial if needed!\"],\r\n    imgPath: page1Img,\r\n    alt: \"welcome img\"\r\n  },\r\n  2: {\r\n    heading: \"How does this work ?\",\r\n    subheading: \"Path Finding Graph Algorithms is used to find Path between two Points (Start and End, even a single checkpoint)\",\r\n    content: [\"Position the Start node, and then the End node. Now, Select an algorithm to visualize it.\", \"Walls and weights can also be added to simulate mazes or maps.\"],\r\n    imgPath: page2Img,\r\n    alt: \"example\"\r\n  },\r\n  3: {\r\n    heading: \"Graph Algorithms\",\r\n    subheading: \"Try out all the algorithm from the Algorithm Dropdown, Each one is different!\",\r\n    content: [\"Dijkstra's Algo - Weighted and guarantees the shortest path, minimizes the path cost. (aka) Father of Pathfinding Algorithms.\",\r\n      \"A* Search - Weighted, guarantees the shortest path using Heuristics. Dijkstra with Heuristics is A*, Faster and better algorithm.\",\r\n      \"Breadth First Search - Unweighted and guarantees the shortest path. Complete and suitable algorithm for PathFinding.\",\r\n      \"Depth First Search - Unweighted and does not guarantee the shortest path. Not suitable for Path Findings.\",\r\n      \"Greedy Best First Search - Weighted, does not guarantee the shortest path. Depends more on the Heuristics.\",\r\n      \"Bi-directional BFS - Unweighted, does not guarantee the shortest path. Performs BFS from both sides.\"],\r\n    imgPath: undefined,\r\n    alt: undefined\r\n  },\r\n  4: {\r\n    heading: \"Adding Walls and Weights\",\r\n    subheading: \"Walls are like deadends, whereas weights add some path cost to the route\",\r\n    content: [\"Walls can be added by clicking on the Grid\",\r\n      \"Weights can be added by clicking on the grid while pressing 'W'\"],\r\n    imgPath: WallsWeights,\r\n    alt: \"walls and weights\"\r\n  },\r\n  5: {\r\n    heading: \"Weights classification\",\r\n    subheading: \"You can find 5 different weights from Weight Dropdown\",\r\n    content: [\"Each Weight imposes different amount of Cost on the route. Weights ranging from 5 to 50 path costs, are shown in different colours (grey to red respectively) on the grid\"],\r\n    imgPath: weights,\r\n    alt: \"weight types\"\r\n  },\r\n  6: {\r\n    heading: \"Add CheckPoint\",\r\n    subheading: \"Path from Start to CheckPoint and then reach End from CheckPoint. Path between 3 points on the Grid.\",\r\n    content: [\"CheckPoint connect the path between start and end\",\r\n      \"Note: Bi-directional BFS algorithm and checkpoint is not supported together!\"],\r\n    imgPath: checkpoint,\r\n    alt: \"checkpoint\"\r\n  },\r\n  7: {\r\n    heading: \"Results\",\r\n    subheading: \"what would be the time taken or other info after the algorithm ends?\",\r\n    content: [\"Number of Visited Nodes, Time Taken and the Path Cost is shown as results once the Algorithm ends.\",\r\n      \"Path cost of each cell is considered to be 1 unless it is weighted. If it is weighted, Path cost is the cost of the Weights applied\"],\r\n    imgPath: results,\r\n    alt: \"result\"\r\n  },\r\n  8: {\r\n    heading: \"Visualize\",\r\n    subheading: \"Try out different Pathfinding Algorithms and Randomized mazes! Check out this project on \",\r\n    content: [\"\"],\r\n    imgPath: page2Img,\r\n    alt: \"visualize\"\r\n  }\r\n}\r\n\r\nconst pageSize = Object.keys(guide).length;\r\n\r\nexport function Guide(props) {\r\n\r\n  let { setGuideDialog, guideDialog } = props;\r\n  const [page, setPage] = useState(1);\r\n\r\n  const handleNext = () => {\r\n    if (page !== pageSize) {\r\n      setPage(page + 1);\r\n    }\r\n  }\r\n  const handlePrevious = () => {\r\n    if (page !== 1) {\r\n      setPage(page - 1);\r\n    }\r\n  }\r\n\r\n  const handleEnd = () => {\r\n    setPage(1);\r\n    setGuideDialog(false);\r\n  }\r\n\r\n  return (\r\n    <div className={`Guide-container ${guideDialog ? \"\" : \"tooltip\"}`}>\r\n      <div className=\"Guide\">\r\n        {!guideDialog ?\r\n          <div className=\"tooltip-tag\"></div>\r\n          : <></>}\r\n        <div className=\"Guide-Slide\">\r\n          <h1>{guide[page].heading}</h1>\r\n          <h2>{guide[page].subheading} {page === 8 ? <a href=\"https://github.com/Hari01V/path-visualizer\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a> : \"\"}</h2>\r\n          {guide[page].content.map((para, index) =>\r\n            <p key={index}>{para}</p>\r\n          )}\r\n          <img src={guide[page].imgPath}\r\n            alt={guide[page].alt}\r\n            className=\"guide-img\" />\r\n        </div>\r\n        <div className=\"controls\">\r\n          <button id=\"controls-left-btn\" className=\"controls-btn\"\r\n            onClick={handlePrevious} disabled={page <= 1}><ArrowLeftIcon /></button>\r\n          <div className=\"page-indicator\">\r\n            {Object.keys(guide).map(key =>\r\n              <div className={`indicator ${page == key ? \"active\" : \"\"}`}\r\n                key={key}></div>\r\n            )}\r\n          </div>\r\n          <button id=\"controls-right-btn\" className=\"controls-btn\"\r\n            onClick={handleNext} disabled={page >= pageSize}><ArrowRightIcon /></button>\r\n          {guideDialog ?\r\n            <button className=\"guide-end\"\r\n              onClick={handleEnd}>End Tutorial</button>\r\n            : <></>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Cell from './Cell';\r\nimport Navbar from './Navbar';\r\n\r\nimport '../styles/PathFinder.css';\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { OPTIONS, ALGO_DESC } from '../database/helper';\r\n\r\nimport { Guide } from './Guide';\r\n\r\nlet board = [];\r\n\r\nlet isWeightAllowed = false;\r\n\r\nexport default function PathFinder(props) {\r\n\r\n  let { row, col, initial_start, initial_end } = props;\r\n\r\n  const [matrix, setMatrix] = useState([]);\r\n  const [isMouseDown, setMouseDown] = useState(false);\r\n  const [start, setStart] = useState(initial_start);\r\n  const [end, setEnd] = useState(initial_end);\r\n  const [isStartRelocating, setStartRelocation] = useState(false);\r\n  const [isEndRelocating, setEndRelocation] = useState(false);\r\n  const [algorithm, setAlgorithm] = useState(\"\");\r\n  const [speed, setSpeed] = useState(\"fast\");\r\n  const [weight, setWeight] = useState(5);\r\n  const [isVisualizing, setVisualizing] = useState(false);\r\n  const [result, setResult] = useState(null);\r\n  const [isCheckPointRelocating, setCheckPointRelocation] = useState(false);\r\n  const [ischeckPointAdded, setCheckPointAdded] = useState(false);\r\n  const [guideDialog, setGuideDialog] = useState(true);\r\n\r\n  //SNACKBAR\r\n  const [snackOpen, setSnackOpen] = useState(false);\r\n  const [snackMsg, setSnackMsg] = useState(undefined);\r\n  const snackHandleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setSnackOpen(false);\r\n  };\r\n\r\n  const createBoard = () => {\r\n    board = [];\r\n    for (let i = 0; i < row; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < col; j++) {\r\n        row.push({\r\n          row: i,\r\n          col: j,\r\n          isStart: i === initial_start.row && j === initial_start.col,\r\n          isEnd: i === initial_end.row && j === initial_end.col,\r\n          isVisited: false,\r\n          isCheckpoint_visited: false,\r\n          isWall: false,\r\n          isCheckPoint: false,\r\n          weight: 1\r\n        })\r\n      }\r\n      board.push(row);\r\n    }\r\n\r\n    let initial_board = [];\r\n    for (let i = 0; i < row; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < col; j++) {\r\n        row.push({\r\n          row: i,\r\n          col: j,\r\n          isStart: i === initial_start.row && j === initial_start.col,\r\n          isEnd: i === initial_end.row && j === initial_end.col,\r\n          isVisited: false,\r\n          isCheckpoint_visited: false,\r\n          isWall: false,\r\n          isCheckPoint: false,\r\n          weight: 1\r\n        })\r\n      }\r\n      initial_board.push(row);\r\n    }\r\n    setMatrix(initial_board);\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.querySelector(\".board-table\").addEventListener(\"mousedown\", () => {\r\n      setMouseDown(true);\r\n    });\r\n    document.querySelector(\".board-table\").addEventListener(\"mouseup\", () => {\r\n      setMouseDown(false);\r\n    });\r\n    document.querySelector(\".board-table\").addEventListener(\"mouseleave\", () => {\r\n      setMouseDown(false);\r\n      setStartRelocation(false);\r\n      setEndRelocation(false);\r\n      setCheckPointRelocation(false);\r\n    });\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (event.code === \"KeyW\") {\r\n        isWeightAllowed = true;\r\n      }\r\n    });\r\n    document.addEventListener(\"keyup\", (event) => {\r\n      isWeightAllowed = false;\r\n    });\r\n    createBoard();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    document.querySelector(\".algo-desc\").innerHTML = ALGO_DESC[algorithm];\r\n    const algo = OPTIONS[\"algorithm\"].find(algo => algo.value === algorithm);\r\n    if (algo && !algo.isWeighted) {\r\n      let need = clearWeights();\r\n      if (need) {\r\n        //SNACK BAR: CURR ALGORITHM IS UNWEIGHTED!\r\n        setSnackMsg(\"Weights have been removed!\")\r\n        setSnackOpen(true);\r\n      }\r\n    }\r\n    if (algo && algo.checkPointNotAllowed && ischeckPointAdded) {\r\n      AddCheckPoint();\r\n    }\r\n  }, [algorithm])\r\n\r\n  const visualize = () => {\r\n    if (!isVisualizing) {\r\n      const currAlgorithm = OPTIONS.algorithm.find(item => item.value === algorithm);\r\n      if (currAlgorithm) {\r\n        clearPath();\r\n        setVisualizing(true);\r\n        if (!currAlgorithm.isWeighted) {\r\n          let need = clearWeights();\r\n          if (need) {\r\n            //SNACK BAR: CURR ALGORITHM IS UNWEIGHTED!\r\n            setSnackMsg(\"Weights have been removed!\")\r\n            setSnackOpen(true);\r\n          }\r\n        }\r\n        currAlgorithm.method(board, setVisualizing, speed, setResult);\r\n      } else {\r\n        const element = document.querySelector(\".algo-desc\");\r\n        element.style.transform = \"scale(1.1)\";\r\n        element.style.color = 'red';\r\n        setTimeout(() => {\r\n          element.style.transform = \"scale(1)\";\r\n          element.style.color = 'black';\r\n        }, 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  const addWeightClass = (event, board, row, col) => {\r\n    board[row][col].weight = board[row][col].weight === weight ? 1 : weight;\r\n    if (weight === 5) {\r\n      event.target.classList.toggle(\"weight-vl\");\r\n      event.target.classList.remove(\"weight-l\");\r\n      event.target.classList.remove(\"weight-m\");\r\n      event.target.classList.remove(\"weight-h\");\r\n      event.target.classList.remove(\"weight-vh\");\r\n    } else if (weight === 10) {\r\n      event.target.classList.remove(\"weight-vl\");\r\n      event.target.classList.toggle(\"weight-l\");\r\n      event.target.classList.remove(\"weight-m\");\r\n      event.target.classList.remove(\"weight-h\");\r\n      event.target.classList.remove(\"weight-vh\");\r\n    } else if (weight === 20) {\r\n      event.target.classList.remove(\"weight-vl\");\r\n      event.target.classList.remove(\"weight-l\");\r\n      event.target.classList.toggle(\"weight-m\");\r\n      event.target.classList.remove(\"weight-h\");\r\n      event.target.classList.remove(\"weight-vh\");\r\n    } else if (weight === 30) {\r\n      event.target.classList.remove(\"weight-vl\");\r\n      event.target.classList.remove(\"weight-l\");\r\n      event.target.classList.remove(\"weight-m\");\r\n      event.target.classList.toggle(\"weight-h\");\r\n      event.target.classList.remove(\"weight-vh\");\r\n    } else if (weight === 50) {\r\n      event.target.classList.remove(\"weight-vl\");\r\n      event.target.classList.remove(\"weight-l\");\r\n      event.target.classList.remove(\"weight-m\");\r\n      event.target.classList.remove(\"weight-h\");\r\n      event.target.classList.toggle(\"weight-vh\");\r\n    }\r\n  }\r\n\r\n  const handleClick = (event, row, col) => {\r\n    let cell = board[row][col];\r\n    let { isStart, isEnd, isVisited, isCheckpoint_visited, isWall, isCheckPoint } = cell;\r\n    if (!isVisualizing && !isStart && !isEnd && !isCheckPoint) {\r\n      event.target.classList.remove(\"visited\");\r\n      event.target.classList.remove(\"visited_to_checkpoint\");\r\n      event.target.classList.remove(\"path\");\r\n      board[row][col].isVisited = false;\r\n      board[row][col].isCheckpoint_visited = false;\r\n      if (isWeightAllowed) {\r\n        board[row][col].isWall = false;\r\n        event.target.classList.remove(\"wall\");\r\n        addWeightClass(event, board, row, col);\r\n      } else {\r\n        event.target.classList.remove(\"weight-vl\");\r\n        event.target.classList.remove(\"weight-l\");\r\n        event.target.classList.remove(\"weight-m\");\r\n        event.target.classList.remove(\"weight-h\");\r\n        event.target.classList.remove(\"weight-vh\");\r\n        board[row][col].weight = 1;\r\n\r\n        event.target.classList.toggle(\"wall\");\r\n        board[row][col].isWall = !(board[row][col].isWall);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMouseEnter = (event, row, col) => {\r\n    let cell = board[row][col];\r\n    let { isStart, isEnd, isVisited, isCheckpoint_visited, isWall, isCheckPoint, weight } = cell;\r\n    if (!isVisualizing && isMouseDown) {\r\n      if (!isStart && !isEnd && !isStartRelocating && !isEndRelocating && !isCheckPointRelocating) {\r\n        event.target.classList.remove(\"path\");\r\n        event.target.classList.remove(\"visited\");\r\n        event.target.classList.remove(\"visited_to_checkpoint\");\r\n        board[row][col].isVisited = false;\r\n        board[row][col].isCheckpoint_visited = false;\r\n        if (isWeightAllowed) {\r\n          board[row][col].isWall = false;\r\n          event.target.classList.remove(\"wall\");\r\n          addWeightClass(event, board, row, col);\r\n        } else {\r\n          event.target.classList.remove(\"weight-vl\");\r\n          event.target.classList.remove(\"weight-l\");\r\n          event.target.classList.remove(\"weight-m\");\r\n          event.target.classList.remove(\"weight-h\");\r\n          event.target.classList.remove(\"weight-vh\");\r\n          board[row][col].weight = 1;\r\n\r\n          event.target.classList.toggle(\"wall\");\r\n          board[row][col].isWall = !(board[row][col].isWall);\r\n        }\r\n      } else if (isStartRelocating && !isEnd && !isCheckPoint) {\r\n        board[start.row][start.col].isStart = false;\r\n        setStart({ row: row, col: col });\r\n        board[row][col].isStart = true;\r\n        // board[row][col].isWall = false;\r\n      } else if (isEndRelocating && !isStart && !isCheckPoint) {\r\n        board[end.row][end.col].isEnd = false;\r\n        setEnd({ row: row, col: col });\r\n        board[row][col].isEnd = true;\r\n        // board[row][col].isWall = false;\r\n      } else if (isCheckPointRelocating && !isStart && !isEnd) {\r\n        board[row][col].isCheckPoint = true;\r\n        event.target.classList.add(\"checkpoint\");\r\n        setMatrix(board);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMouseDown = (event, row, col) => {\r\n    let cell = board[row][col];\r\n    let { isStart, isEnd, isVisited, isCheckpoint_visited, isWall, isCheckPoint, weight } = cell;\r\n    if (!isVisualizing) {\r\n      if (isStart) {\r\n        setStartRelocation(true);\r\n        board[row][col].isStart = false;\r\n        // setMatrix([...matrix, [...matrix[row], { ...matrix[row][col], isStart: false }]]);\r\n        setMatrix(board);\r\n      } else if (isEnd) {\r\n        setEndRelocation(true);\r\n        board[row][col].isEnd = false;\r\n        // setMatrix([...matrix, [...matrix[row], { ...matrix[row][col], isEnd: false }]]);\r\n        setMatrix(board);\r\n      } else if (isCheckPoint) {\r\n        setCheckPointRelocation(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMouseLeave = (event, row, col) => {\r\n    let cell = board[row][col];\r\n    let { isStart, isEnd, isVisited, isCheckpoint_visited, isWall, isCheckPoint, weight } = cell;\r\n    if (!isVisualizing) {\r\n      if (isCheckPointRelocating) {\r\n        board[row][col].isCheckPoint = false;\r\n        event.target.classList.remove(\"checkpoint\");\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMouseUp = (event, row, col) => {\r\n    let cell = board[row][col];\r\n    let { isStart, isEnd, isVisited, isCheckpoint_visited, isWall, isCheckPoint, weight } = cell;\r\n    if (!isVisualizing) {\r\n      if (isStartRelocating) {\r\n        if (!isEnd && !isCheckPoint) {\r\n          setStart({ row: row, col: col });\r\n          board[row][col].isStart = true;\r\n          // board[row][col].isWall = false;\r\n        }\r\n        setStartRelocation(false);\r\n      }\r\n      if (isEndRelocating) {\r\n        if (!isStart && !isCheckPoint) {\r\n          setEnd({ row: row, col: col });\r\n          board[row][col].isEnd = true;\r\n          // board[row][col].isWall = false;\r\n        }\r\n        setEndRelocation(false);\r\n      }\r\n      if (isCheckPointRelocating) {\r\n        if (!isStart && !isEnd) {\r\n          // board[row][col].isCheckPoint = true;\r\n        }\r\n        setCheckPointRelocation(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  const clearWalls = () => {\r\n    if (!isVisualizing) {\r\n      for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board[0].length; j++) {\r\n          board[i][j].isWall = false;\r\n          board[i][j].weight = 1;\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"wall\");\r\n          board[i][j].isVisited = false;\r\n          board[i][j].isCheckpoint_visited = false;\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"path\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vl\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-l\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-m\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-h\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vh\");\r\n        }\r\n      }\r\n      setSnackMsg(\"Cleared Walls\");\r\n      setSnackOpen(true);\r\n    }\r\n  }\r\n\r\n  const clearWeights = () => {\r\n    if (!isVisualizing) {\r\n      let need = false;\r\n      for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board[0].length; j++) {\r\n          if (board[i][j].weight !== 1) {\r\n            need = true;\r\n          }\r\n          board[i][j].weight = 1;\r\n          const cell = document.querySelector(`#cell-${i}-${j} .cell`);\r\n          cell.classList.remove(\"weight-vl\");\r\n          cell.classList.remove(\"weight-l\");\r\n          cell.classList.remove(\"weight-m\");\r\n          cell.classList.remove(\"weight-h\");\r\n          cell.classList.remove(\"weight-vh\");\r\n        }\r\n      }\r\n      return need;\r\n    }\r\n  }\r\n\r\n  const resetBoard = () => {\r\n    if (!isVisualizing) {\r\n      board = [];\r\n      for (let i = 0; i < row; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < col; j++) {\r\n          row.push({\r\n            row: i,\r\n            col: j,\r\n            isStart: i === initial_start.row && j === initial_start.col,\r\n            isEnd: i === initial_end.row && j === initial_end.col,\r\n            isVisited: false,\r\n            isCheckpoint_visited: false,\r\n            isWall: false,\r\n            isCheckPoint: false,\r\n            weight: 1\r\n          });\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"wall\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"path\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"checkpoint\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vl\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-l\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-m\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-h\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"weight-vh\");\r\n        }\r\n        board.push(row);\r\n      }\r\n      // setMatrix(board);\r\n      setCheckPointAdded(false);\r\n      setSnackMsg(\"Board Reset\");\r\n      setSnackOpen(true);\r\n    }\r\n  }\r\n\r\n  const clearPath = () => {\r\n    if (!isVisualizing) {\r\n      for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board[0].length; j++) {\r\n          board[i][j].isVisited = false;\r\n          board[i][j].isCheckpoint_visited = false;\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n          document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"path\");\r\n        }\r\n      }\r\n      setSnackMsg(\"Cleared Path\");\r\n      setSnackOpen(true);\r\n    }\r\n  }\r\n\r\n  const AddCheckPoint = () => {\r\n    if (!isVisualizing) {\r\n      const currAlgo = OPTIONS[\"algorithm\"].find(algo => algo.value === algorithm);\r\n      if (currAlgo && currAlgo.checkPointNotAllowed) {\r\n        for (let i = 0; i < row; i++) {\r\n          for (let j = 0; j < col; j++) {\r\n            if (board[i][j].isCheckPoint) {\r\n              board[i][j].isCheckPoint = false;\r\n              document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"checkpoint\");\r\n            }\r\n          }\r\n        }\r\n        setCheckPointAdded(false);\r\n        //SNACK BAR: CURRENT ALGORITHM DOES NOT SUPPORT CHECKPOINT\r\n        setSnackMsg(\"Bidir-BFS does not support CheckPoint!\");\r\n        setSnackOpen(true);\r\n      } else {\r\n        if (ischeckPointAdded) {\r\n          for (let i = 0; i < row; i++) {\r\n            for (let j = 0; j < col; j++) {\r\n              if (board[i][j].isCheckPoint) {\r\n                board[i][j].isCheckPoint = false;\r\n                document.querySelector(`#cell-${i}-${j} .cell`).classList.remove(\"checkpoint\");\r\n              }\r\n            }\r\n          }\r\n          setCheckPointAdded(false);\r\n          setSnackMsg(\"Removed CheckPoint!\");\r\n          setSnackOpen(true);\r\n        } else {\r\n          let row = 8;\r\n          let col = 20;\r\n          if (!board[8][20].isStart && !board[8][20].isEnd) {\r\n            row = 8;\r\n            col = 20;\r\n          } else if (!board[8][21].isStart && !board[8][21].isEnd) {\r\n            row = 8;\r\n            col = 21;\r\n          } else if (!board[8][19].isStart && !board[8][19].isEnd) {\r\n            row = 8;\r\n            col = 19;\r\n          }\r\n          board[row][col].isVisited = false;\r\n          board[row][col].isCheckpoint_visited = false;\r\n          board[row][col].isCheckPoint = true;\r\n          document.querySelector(`#cell-${row}-${col} .cell`).classList.remove(\"visited\");\r\n          document.querySelector(`#cell-${row}-${col} .cell`).classList.remove(\"visited_to_checkpoint\");\r\n          document.querySelector(`#cell-${row}-${col} .cell`).classList.remove(\"path\");\r\n          document.querySelector(`#cell-${row}-${col} .cell`).classList.add(\"checkpoint\");\r\n          // setMatrix(board);\r\n          setCheckPointAdded(true);\r\n          setSnackMsg(\"Added CheckPoint!\");\r\n          setSnackOpen(true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const createMaze = (method, weight) => {\r\n    if (!isVisualizing) {\r\n      setVisualizing(true);\r\n      method(board, speed, weight, setVisualizing);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"path-finder\">\r\n      <Navbar visualize={visualize}\r\n        setAlgorithm={setAlgorithm}\r\n        setSpeed={setSpeed}\r\n        setWeight={setWeight}\r\n        createMaze={createMaze}\r\n        OPTIONS={OPTIONS}\r\n        resetBoard={resetBoard}\r\n        clearWalls={clearWalls}\r\n        clearPath={clearPath}\r\n        AddCheckPoint={AddCheckPoint}\r\n        ischeckPointAdded={ischeckPointAdded}\r\n        weight={weight} />\r\n      <div className=\"algo-desc\"></div>\r\n      <div className=\"search-result\">\r\n        <div className=\"result-part\">\r\n          <span className=\"result-part-value\">{isVisualizing || !result ? \"-\" : result.visited_nodes}</span> VISITED NODES\r\n        </div>\r\n        <div className=\"result-part\">\r\n          <span className=\"result-part-value\">{isVisualizing || !result ? \"-\" : result.time_taken}</span> TIME TAKEN(in ms)\r\n        </div>\r\n        <div className=\"result-part\">\r\n          <span className=\"result-part-value\">{isVisualizing || !result ? \"-\" : result.path_cost}</span> PATH COST\r\n        </div>\r\n      </div>\r\n      <div className=\"board\">\r\n        <table>\r\n          <tbody className=\"board-table\">\r\n            {matrix.map((row, row_index) =>\r\n              <tr id={`row-${row_index}`} key={`row-${row_index}`} className=\"table-row\">\r\n                {row.map((cell, cell_index) =>\r\n                  <td id={`cell-${row_index}-${cell_index}`}\r\n                    key={`${row_index}-${cell_index}`}\r\n                    className=\"table-cell\">\r\n                    <Cell\r\n                      cell={cell}\r\n                      onClick={(event) => handleClick(event, cell.row, cell.col)}\r\n                      onMouseEnter={(event) => handleMouseEnter(event, cell.row, cell.col)}\r\n                      onMouseDown={(event) => handleMouseDown(event, cell.row, cell.col)}\r\n                      onMouseUp={(event) => handleMouseUp(event, cell.row, cell.col)}\r\n                      onMouseLeave={(event) => handleMouseLeave(event, cell.row, cell.col)} />\r\n                  </td>\r\n                )}\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <Guide setGuideDialog={setGuideDialog} guideDialog={guideDialog} />\r\n      {snackMsg ?\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={snackOpen}\r\n          autoHideDuration={3000}\r\n          onClose={snackHandleClose}\r\n          message={snackMsg}\r\n          action={\r\n            <React.Fragment>\r\n              <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={snackHandleClose}>\r\n                <CloseIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n        : <></>}\r\n    </div>\r\n  )\r\n}\r\n\r\nPathFinder.defaultProps = {\r\n  row: 25,\r\n  col: 50,\r\n  initial_start: { row: 8, col: 8 },\r\n  initial_end: { row: 8, col: 40 }\r\n}","import './App.css';\n\nimport PathFinder from './Components/PathFinder';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}